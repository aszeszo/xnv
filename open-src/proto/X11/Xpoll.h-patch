Add extended versions of select() mask macros needed for Xsun for dynamic
1024-client support (4185418: the X server should support more connections)

--- Xpoll.h.in	Thu Apr  6 18:46:55 2006
+++ Xpoll.h.in	Fri Apr  7 13:25:05 2006
@@ -252,4 +252,126 @@
 
 #endif /* WIN32 */
 
+#ifdef SUNSOFT
+/* Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, and/or sell copies of the Software, and to permit persons
+ * to whom the Software is furnished to do so, provided that the above
+ * copyright notice(s) and this permission notice appear in all copies of
+ * the Software and that both the above copyright notice(s) and this
+ * permission notice appear in supporting documentation.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
+ * OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
+ * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
+ * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
+ * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
+ * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ * Except as contained in this notice, the name of a copyright holder
+ * shall not be used in advertising or otherwise to promote the sale, use
+ * or other dealings in this Software without prior written authorization
+ * of the copyright holder.
+ */
+
+/* Extended macros used by Xsun's 1024 client/file descriptor enhancement */
+
+#define XFD_SETSIZE_1024	1024
+#define XFD_SETSIZE_F(f)	(f ? XFD_SETSIZE_1024 : XFD_SETSIZE)
+
+#ifndef FD_SETSIZE_F
+#define FD_SETSIZE_F(f)		XFD_SETSIZE_F(f)
+#endif
+
+#define XFD_ANYSET_1024(p) \
+        ((__XFDS_BITS(p,  0)) || (__XFDS_BITS(p,  1)) || \
+         (__XFDS_BITS(p,  2)) || (__XFDS_BITS(p,  3)) || \
+         (__XFDS_BITS(p,  4)) || (__XFDS_BITS(p,  5)) || \
+         (__XFDS_BITS(p,  6)) || (__XFDS_BITS(p,  7)) || \
+         (__XFDS_BITS(p,  8)) || (__XFDS_BITS(p,  9)) || \
+         (__XFDS_BITS(p, 10)) || (__XFDS_BITS(p, 11)) || \
+         (__XFDS_BITS(p, 12)) || (__XFDS_BITS(p, 13)) || \
+         (__XFDS_BITS(p, 14)) || (__XFDS_BITS(p, 15)) || \
+         (__XFDS_BITS(p, 16)) || (__XFDS_BITS(p, 17)) || \
+         (__XFDS_BITS(p, 18)) || (__XFDS_BITS(p, 19)) || \
+         (__XFDS_BITS(p, 20)) || (__XFDS_BITS(p, 21)) || \
+         (__XFDS_BITS(p, 22)) || (__XFDS_BITS(p, 23)) || \
+         (__XFDS_BITS(p, 24)) || (__XFDS_BITS(p, 25)) || \
+         (__XFDS_BITS(p, 26)) || (__XFDS_BITS(p, 27)) || \
+         (__XFDS_BITS(p, 28)) || (__XFDS_BITS(p, 29)) || \
+         (__XFDS_BITS(p, 30)) || (__XFDS_BITS(p, 31)) )
+
+#define XFD_ANYSET_F(p,f) \
+	(XFD_ANYSET(p) || (!f ? 0 : ( \
+	 (__XFDS_BITS(p,  8)) || (__XFDS_BITS(p,  9)) || \
+	 (__XFDS_BITS(p, 10)) || (__XFDS_BITS(p, 11)) || \
+	 (__XFDS_BITS(p, 12)) || (__XFDS_BITS(p, 13)) || \
+	 (__XFDS_BITS(p, 14)) || (__XFDS_BITS(p, 15)) || \
+	 (__XFDS_BITS(p, 16)) || (__XFDS_BITS(p, 17)) || \
+	 (__XFDS_BITS(p, 18)) || (__XFDS_BITS(p, 19)) || \
+	 (__XFDS_BITS(p, 20)) || (__XFDS_BITS(p, 21)) || \
+	 (__XFDS_BITS(p, 22)) || (__XFDS_BITS(p, 23)) || \
+	 (__XFDS_BITS(p, 24)) || (__XFDS_BITS(p, 25)) || \
+	 (__XFDS_BITS(p, 26)) || (__XFDS_BITS(p, 27)) || \
+	 (__XFDS_BITS(p, 28)) || (__XFDS_BITS(p, 29)) || \
+	 (__XFDS_BITS(p, 30)) || (__XFDS_BITS(p, 31)) )))
+
+#define XFD_COPYSET_1024(src,dst) { \
+        int __i__; \
+		for (__i__ = 0; __i__ < howmany(XFD_SETSIZE_1024, NFDBITS); __i__++) \
+            __XFDS_BITS((dst), __i__) = __XFDS_BITS((src), __i__); \
+        }
+
+#define XFD_COPYSET_F(src,dst,f) { \
+        int __i__; \
+		for (__i__ = 0; __i__ < howmany(XFD_SETSIZE_F(f), NFDBITS); __i__++) \
+            __XFDS_BITS((dst), __i__) = __XFDS_BITS((src), __i__); \
+        }
+
+#define XFD_ANDSET_1024(dst,b1,b2) { \
+        int __i__; \
+        for (__i__ = 0; __i__ < howmany(XFD_SETSIZE_1024, NFDBITS); __i__++) \
+            __XFDS_BITS((dst), __i__) = ((__XFDS_BITS((b1), __i__)) & (__XFDS_BITS((b2), __i__))); \
+        }
+
+#define XFD_ANDSET_F(dst,b1,b2,f) { \
+        int __i__; \
+        for (__i__ = 0; __i__ < howmany(XFD_SETSIZE_F(f), NFDBITS); __i__++) \
+            __XFDS_BITS((dst), __i__) = ((__XFDS_BITS((b1), __i__)) & (__XFDS_BITS((b2), __i__))); \
+        }
+
+
+#define XFD_ORSET_1024(dst,b1,b2) { \
+        int __i__; \
+        for (__i__ = 0; __i__ < howmany(XFD_SETSIZE_1024, NFDBITS); __i__++) \
+		__XFDS_BITS((dst), __i__) = ((__XFDS_BITS((b1), __i__)) | (__XFDS_BITS((b2), __i__))); \
+        }
+
+#define XFD_ORSET_F(dst,b1,b2,f) { \
+        int __i__; \
+        for (__i__ = 0; __i__ < howmany(XFD_SETSIZE_F(f), NFDBITS); __i__++) \
+		__XFDS_BITS((dst), __i__) = ((__XFDS_BITS((b1), __i__)) | (__XFDS_BITS((b2), __i__))); \
+        }
+
+#define XFD_UNSET_1024(dst,b1) { \
+        int __i__; \
+        for (__i__ = 0; __i__ < howmany(XFD_SETSIZE_1024, NFDBITS); __i__++) \
+    		__XFDS_BITS((dst), __i__) &= ~(__XFDS_BITS((b1), __i__)); \
+        }
+
+#define XFD_UNSET_F(dst,b1,f) { \
+        int __i__; \
+        for (__i__ = 0; __i__ < howmany(XFD_SETSIZE_F(f), NFDBITS); __i__++) \
+    		__XFDS_BITS((dst), __i__) &= ~(__XFDS_BITS((b1), __i__)); \
+        }
+
+#endif /* SUNSOFT additions */
+
 #endif /* _XPOLL_H_ */
