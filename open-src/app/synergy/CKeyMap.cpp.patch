--- lib/synergy/CKeyMap.cpp	2006-03-21 21:40:27.000000000 -0800
+++ lib/synergy/CKeyMap.cpp	2009-07-14 11:17:31.805175247 -0700
@@ -17,7 +17,8 @@
 #include "CLog.h"
 #include <assert.h>
 #include <ctype.h>
-#include <stdlib.h>
+#include <cstdlib>
+#include <map>
 
 CKeyMap::CNameToKeyMap*			CKeyMap::s_nameToKeyMap      = NULL;
 CKeyMap::CNameToModifierMap*	CKeyMap::s_nameToModifierMap = NULL;
@@ -965,9 +966,10 @@
 		keystrokes.push_back(Keystroke(button, true, false, data));
 		if (keyItem.m_generates != 0) {
 			if (!keyItem.m_lock || (currentState & keyItem.m_generates) == 0) {
+			    std::pair<const unsigned, CKeyMap::KeyItem> elem = 
+				std::make_pair<const unsigned, CKeyMap::KeyItem>(keyItem.m_generates, keyItem);
 				// add modifier key and activate modifier
-				activeModifiers.insert(std::make_pair(
-									keyItem.m_generates, keyItem));
+				activeModifiers.insert(std::multimap<const unsigned, CKeyMap::KeyItem>::value_type(elem));
 				currentState |= keyItem.m_generates;
 			}
 			else {
@@ -1039,9 +1041,9 @@
 		else {
 			// release all the keys that generate the modifier that are
 			// currently down
-			std::pair<ModifierToKeys::const_iterator,
-						ModifierToKeys::const_iterator> range =
-				activeModifiers.equal_range(keyItem.m_generates);
+		    std::pair<ModifierToKeys::const_iterator, ModifierToKeys::const_iterator> range;
+		    range.first = activeModifiers.equal_range(keyItem.m_generates).first;
+		    range.second = activeModifiers.equal_range(keyItem.m_generates).second;
 			for (ModifierToKeys::const_iterator i = range.first;
 								i != range.second; ++i) {
 				keystrokes.push_back(Keystroke(i->second.m_button,
@@ -1050,8 +1052,9 @@
 		}
 
 		if (type == kKeystrokeModify) {
-			activeModifiers.insert(std::make_pair(
-								keyItem.m_generates, keyItem));
+		    std::pair<const unsigned, CKeyMap::KeyItem> elem =
+			std::make_pair<const unsigned, CKeyMap::KeyItem>(keyItem.m_generates, keyItem);
+		    activeModifiers.insert(std::multimap<const unsigned, CKeyMap::KeyItem>::value_type(elem));
 			currentState |= keyItem.m_generates;
 		}
 		else {
