/*
 * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, and/or sell copies of the Software, and to permit persons
 * to whom the Software is furnished to do so, provided that the above
 * copyright notice(s) and this permission notice appear in all copies of
 * the Software and that both the above copyright notice(s) and this
 * permission notice appear in supporting documentation.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
 * OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
 * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Except as contained in this notice, the name of a copyright holder
 * shall not be used in advertising or otherwise to promote the sale, use
 * or other dealings in this Software without prior written authorization
 * of the copyright holder.
 *
 */

Fix for: 4849641: xscreensaver won't run as root

Let root lock the screen, but don't launch the hacks for root.

(Upstream maintainer argues instead that users should not login as root,
 which is correct, but not something we can force our customers to stop
 doing.  See http://www.jwz.org/xscreensaver/faq.html#root-lock for his side.)


diff -urp -x '*~' driver/demo-Gtk.c driver/demo-Gtk.c
--- driver/demo-Gtk.c	2006-05-10 08:48:29.898310000 -0700
+++ driver/demo-Gtk.c	2006-05-10 08:48:35.790594000 -0700
@@ -533,6 +533,14 @@ run_cmd (state *s, Atom command, int arg
   char *err = 0;
   int status;
 
+  if (getuid() == 0) 
+   {
+      char buf [255];
+      strcpy (buf, _("Cant run hacks if logged in as root!"));
+      warning_dialog (s->toplevel_widget, buf, False, 100);
+     return; 
+   }
+
   flush_dialog_changes_and_save (s);
   status = xscreensaver_command (GDK_DISPLAY(), command, arg, False, &err);
   if (status < 0)
@@ -552,6 +560,15 @@ static void
 run_hack (state *s, int list_elt, Bool report_errors_p)
 {
   int hack_number;
+
+  if (getuid() == 0) 
+   {
+      char buf [255];
+      strcpy (buf, _("Cant run hacks if logged in as root!"));
+      warning_dialog (s->toplevel_widget, buf, False, 100);
+     return; 
+   }
+
   if (list_elt < 0) return;
   hack_number = s->list_elt_to_hack_number[list_elt];
 
@@ -4131,11 +4148,21 @@ main (int argc, char **argv)
     GtkOptionMenu *opt = GTK_OPTION_MENU (name_to_widget (s, "mode_menu"));
     GtkMenu *menu = GTK_MENU (gtk_option_menu_get_menu (opt));
     GList *kids = gtk_container_children (GTK_CONTAINER (menu));
+
+    if (getuid() == 0)
+     {
+      /*mali if logged in as root disable menu so user cant activate a hack...*/
+      gtk_widget_set_sensitive (opt, False);
+      gtk_widget_set_sensitive (menu, False);
+     }
+    else
+     {
     for (; kids; kids = kids->next)
       gtk_signal_connect (GTK_OBJECT (kids->data), "activate",
                           GTK_SIGNAL_FUNC (mode_menu_item_cb),
                           (gpointer) s);
   }
+  }
 
 
   /* Handle the -prefs command-line argument. */
diff -urp -x '*~' driver/exec.c driver/exec.c
--- driver/exec.c	2002-01-17 00:34:43.000000000 -0800
+++ driver/exec.c	2006-05-10 08:48:35.753517000 -0700
@@ -185,6 +185,7 @@ exec_command (const char *shell, const c
   hairy_p = !!strpbrk (command, "*?$&!<>[];`'\\\"=");
   /* note: = is in the above because of the sh syntax "FOO=bar cmd". */
 
+#ifdef DONT_ALLOW_ROOT_LOGIN
   if (getuid() == (uid_t) 0 || geteuid() == (uid_t) 0)
     {
       /* If you're thinking of commenting this out, think again.
@@ -195,6 +196,7 @@ exec_command (const char *shell, const c
                blurb());
       exit (-1);
     }
+#endif /*DONT_ALLOW_ROOT_LOGIN*/
 
   if (hairy_p)
     /* If it contains any shell metacharacters, do it the hard way,
diff -urp -x '*~' driver/setuid.c driver/setuid.c
--- driver/setuid.c	2006-05-10 08:48:29.941707000 -0700
+++ driver/setuid.c	2006-05-10 08:48:35.755829000 -0700
@@ -83,6 +83,10 @@ set_ids_by_number (uid_t uid, gid_t gid,
   struct passwd *p = getpwuid (uid);
   struct group  *g = getgrgid (gid);
 
+  /* if we are logged in as root i.e. uid==0 then dont do anything*/
+  if (getuid() == 0)
+   return;
+
   if (message_ret)
     *message_ret = 0;
 
@@ -192,6 +196,9 @@ hack_uid (saver_info *si)
          of the xscreensaver manual titled "LOCKING AND ROOT LOGINS",
          and "USING XDM".
    */
+
+/* We are letting root login to fix a P1 bug, i.e. root should lock screen*/
+#ifdef DONT_ALLOW_ROOT_LOGIN
   if (getuid() == (uid_t) 0)
     {
       si->locking_disabled_p = True;
@@ -229,6 +236,7 @@ hack_uid (saver_info *si)
       if (set_ids_by_number (p->pw_uid, p->pw_gid, &si->uid_message) != 0)
 	saver_exit (si, -1, 0);
     }
+#endif /*DONT_ALLOW_ROOT_LOGIN*/
 
 
   /* If there's anything even remotely funny looking about the passwd struct,
@@ -271,7 +279,10 @@ hack_uid (saver_info *si)
 		 (p && p->pw_name && *p->pw_name
 		  ? p->pw_name : "<unknown>"));
 	si->nolock_reason = buf;
+
+#ifdef DONT_ALLOW_ROOT_LOGIN
 	si->locking_disabled_p = True;
+#endif
 	si->dangerous_uid_p = True;
       }
   }
diff -urp -x '*~' driver/subprocs.c driver/subprocs.c
--- driver/subprocs.c	2006-05-10 08:48:29.955074000 -0700
+++ driver/subprocs.c	2006-05-10 08:48:35.788404000 -0700
@@ -849,6 +849,9 @@ check_if_hacks_dir_exists(void)
 void
 spawn_screenhack (saver_info *si, Bool first_time_p)
 {
+  if (getuid() == 0)
+    return;  /* Dont let hacks run if logged in as root*/
+
   if (si->prefs.verbose_p)
    fprintf(stderr, "--> spawn_screenhack()\n");
 
diff -urp -x '*~' driver/timers.c driver/timers.c
--- driver/timers.c	2006-05-10 08:48:29.940928000 -0700
+++ driver/timers.c	2006-05-10 08:48:35.781471000 -0700
@@ -248,7 +248,8 @@ cycle_timer (XtPointer closure, XtInterv
       maybe_reload_init_file (si);
       kill_screenhack (si);
 
-      if (!si->throttled_p)
+      /* if we are root then dont run hacks*/
+      if (!si->throttled_p && getuid() !=0)
         spawn_screenhack (si, False);
       else
         {
diff -urp -x '*~' driver/xscreensaver.c driver/xscreensaver.c
--- driver/xscreensaver.c	2006-05-10 08:48:29.979552000 -0700
+++ driver/xscreensaver.c	2006-05-10 08:48:35.764178000 -0700
@@ -399,6 +399,7 @@ startup_ehandler (String name, String ty
 
   describe_uids (si, stderr);
 
+#ifdef DONT_ALLOW_ROOT_LOGIN
   if (si->orig_uid && !strncmp (si->orig_uid, "root/", 5))
     {
       fprintf (stderr, "\n"
@@ -412,11 +413,11 @@ startup_ehandler (String name, String ty
                blurb());
     }
   else
+#endif /*DONT_ALLOW_ROOT_LOGIN*/
     {
       fprintf (stderr, "\n"
           "%s: Errors at startup are usually authorization problems.\n"
-"              But you're not logging in as root (good!) so something\n"
-"              else must be wrong.  Did you read the manual and the FAQ?\n",
+"              Did you read the manual and the FAQ?\n",
            blurb());
     }
 
@@ -1034,7 +1035,7 @@ main_loop (saver_info *si)
 
       kill_screenhack (si);
 
-      if (!si->throttled_p)
+      if (!si->throttled_p && getuid() != 0)
         spawn_screenhack (si, True);
       else if (p->verbose_p)
         fprintf (stderr, "%s: not launching hack (throttled.)\n", blurb());
