/*
 * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, and/or sell copies of the Software, and to permit persons
 * to whom the Software is furnished to do so, provided that the above
 * copyright notice(s) and this permission notice appear in all copies of
 * the Software and that both the above copyright notice(s) and this
 * permission notice appear in supporting documentation.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
 * OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
 * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Except as contained in this notice, the name of a copyright holder
 * shall not be used in advertising or otherwise to promote the sale, use
 * or other dealings in this Software without prior written authorization
 * of the copyright holder.
 *
 */

Miscellaneous DPMS fixes, including:
- Allow xset dpms settings to override .xscreensaver.
- Changed dpms hack of not allowing to run a hack if system did not support 
  DPMS, for sunray performance issues. Now, we check if hack dir exists and 
  not use DPMS support before running a hack.


diff -urp -x '*~' driver/timers.c driver/timers.c
--- driver/timers.c	2006-05-10 08:49:10.952391000 -0700
+++ driver/timers.c	2006-05-10 08:49:17.369181000 -0700
@@ -1387,13 +1387,17 @@ watchdog_timer (XtPointer closure, XtInt
 
   /* If the DPMS settings on the server have changed, change them back to
      what ~/.xscreensaver says they should be. */
-  sync_server_dpms_settings (si->dpy,
+  /* mali- No!! if someone uses xset then let the changes be picked by
+   * xscreensaver...do not have to regulate everything from .xscreensaver.
+   ***/
+  /**sync_server_dpms_settings (si->dpy,
                              (p->dpms_enabled_p  &&
                               p->mode != DONT_BLANK),
                              p->dpms_standby / 1000,
                              p->dpms_suspend / 1000,
                              p->dpms_off / 1000,
                              False);
+  **/
 
   if (p->verbose_p)
    fprintf (stderr, "--->watchdog_timer()\n");
diff -urp -x '*~' driver/xscreensaver.c driver/xscreensaver.c
--- driver/xscreensaver.c	2006-05-10 08:49:10.960069000 -0700
+++ driver/xscreensaver.c	2006-05-10 08:49:17.373784000 -0700
@@ -1380,6 +1380,11 @@ while (debug_flag)
   init_sigchld ();
 
   disable_builtin_screensaver (si, True);
+
+/*****
+  mali- this may need to be taken out in future if it hinders user
+  setting dpms values through xset.
+ *****/
   sync_server_dpms_settings (si->dpy,
                              (p->dpms_enabled_p  &&
                               p->mode != DONT_BLANK),
diff -urp -x '*~' driver/xset.c driver/xset.c
--- driver/xset.c	2006-05-10 08:49:10.891006000 -0700
+++ driver/xset.c	2006-05-10 08:49:17.372412000 -0700
@@ -491,15 +491,33 @@ monitor_powered_on_p (saver_info *si)
     result = True;
 
   else if (!DPMSCapable(si->dpy))
+   {
     /* Server says the monitor doesn't do power management -- so it's on. */
-    result = True;
+    /* mali- No, for sunrays if dpms is not working we dont want hacks to run */
+       if (si->prefs.verbose_p)
+       {
+         fprintf(stderr, "Monitor is not DPMSCapable!!\n");
+         fflush(stderr);
+       }
+       result = True;
+    }
 
   else
     {
+
       DPMSInfo(si->dpy, &state, &onoff);
+      if (si->prefs.verbose_p)
+       {
+         fprintf(stderr, "DPMSInfo returned onoff=%d and state=%d\n", onoff, state);
+         fflush(stderr);
+       }
+
       if (!onoff)
+       {
 	/* Server says DPMS is disabled -- so the monitor is on. */
-	result = True;
+        /*mali no if DPMS is diabled then still run hacks **/
+	 result = True;
+       }
       else
 	switch (state) {
 	case DPMSModeOn:      result = True;  break;  /* really on */
@@ -516,14 +534,17 @@ monitor_powered_on_p (saver_info *si)
 void
 monitor_power_on (saver_info *si)
 {
-  if (!monitor_powered_on_p (si))
+  if (!monitor_powered_on_p (si) && si->prefs.dpms_enabled_p)
     {
+return;
+/***mali causing BadMatch X Error
       DPMSForceLevel(si->dpy, DPMSModeOn);
       XSync(si->dpy, False);
       if (!monitor_powered_on_p (si))
 	fprintf (stderr,
        "%s: DPMSForceLevel(dpy, DPMSModeOn) did not power the monitor on?\n",
 		 blurb());
+****/
     }
 }
 
