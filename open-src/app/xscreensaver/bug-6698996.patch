/*
 * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, and/or sell copies of the Software, and to permit persons
 * to whom the Software is furnished to do so, provided that the above
 * copyright notice(s) and this permission notice appear in all copies of
 * the Software and that both the above copyright notice(s) and this
 * permission notice appear in supporting documentation.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
 * OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
 * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Except as contained in this notice, the name of a copyright holder
 * shall not be used in advertising or otherwise to promote the sale, use
 * or other dealings in this Software without prior written authorization
 * of the copyright holder.
 *
 */

diff -urp driver/lock.c driver/lock.c
--- driver/lock.c	Wed Jul 30 15:49:41 2008
+++ driver/lock.c	Wed Jul 30 14:53:42 2008
@@ -1961,6 +1961,7 @@
     }
 }
 
+void XTSOLMakeTPWindow(Display *, Window);
 
 void
 passwd_event_loop (saver_info *si)
@@ -2005,6 +2006,7 @@
     write_to_child (si, "pw_read");
     usleep (250000); /** 1/4 second */
     XSync (si->dpy, False);
+    XTSOLMakeTPWindow(si->dpy,w);
     if(p->verbose_p)
       fprintf (stderr, "event loop..trying to grab keyboard######\n");
    }
diff -urp driver/windows.c driver/windows.c
--- driver/windows.c	Wed Jul 30 15:49:40 2008
+++ driver/windows.c	Wed Jul 30 14:58:32 2008
@@ -36,6 +36,7 @@
 #include <X11/Xatom.h>
 #include <X11/Xos.h>		/* for time() */
 #include <X11/Intrinsic.h>
+#include <X11/keysym.h>
 #include <signal.h>		/* for the signal names */
 #include <time.h>
 #include <sys/time.h>
@@ -90,6 +91,7 @@
 	 Button1MotionMask | Button2MotionMask | Button3MotionMask | \
 	 Button4MotionMask | Button5MotionMask | ButtonMotionMask)
 
+void XTSOLMakeTPWindow(Display *, Window);
 
 static const char *
 grab_string(int status)
@@ -226,7 +228,39 @@
   XSync (si->dpy, False);
 }
 
+/* try to break a grab by sending Escape key event to the top most
+   window. */
 
+void
+break_grab(saver_info *si, Window w, int screen_no)
+{
+  Window focus, root_ret, p_ret, *child_ret;
+  int revert;
+  unsigned int nchild;
+  XKeyEvent kev;
+  XErrorHandler old_handler;
+  if (!tsol_is_multi_label_session()) {
+        return;
+  }
+  old_handler = XSetErrorHandler (BadWindow_ehandler);
+  (void)XQueryTree(si->dpy,RootWindow(si->dpy,screen_no),&root_ret,&p_ret,
+              &child_ret,&nchild);
+  focus=child_ret[nchild-1];
+  if (si->prefs.verbose_p) fprintf(stderr,"Sending escape key event to window=0x%x\n",focus);
+  kev.window = focus;
+  kev.keycode = XKeysymToKeycode(si->dpy, XK_Escape);
+  kev.time = CurrentTime;
+  kev.state = 0;
+  kev.type = KeyPress;
+  XSendEvent(si->dpy, kev.window, True, KeyPressMask,
+            (XEvent *) &kev);
+  kev.type = KeyRelease;
+  XSendEvent(si->dpy, kev.window, True, KeyReleaseMask,
+            (XEvent *) &kev);
+  XSetErrorHandler (old_handler);
+  return;
+}
+
 static Bool
 grab_keyboard_and_mouse (saver_info *si, Window window, Cursor cursor,
                          int screen_no)
@@ -249,6 +283,8 @@
        * sleeping for 1 sec is too long, compounded wih retries.
        */
       usleep (125000);
+      (void)XTSOLMakeTPWindow(si->dpy,window);
+      break_grab(si,window,screen_no);
     }
 
   if (kstatus != GrabSuccess)
@@ -273,6 +309,8 @@
 
       /* else, wait 1/8th second and try to grab again. */
       usleep (125000);
+      (void)XTSOLMakeTPWindow(si->dpy,window);
+      break_grab(si,window,screen_no);
     }
 
   if (mstatus != GrabSuccess)
