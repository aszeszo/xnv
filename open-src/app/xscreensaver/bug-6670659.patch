/*
 * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, and/or sell copies of the Software, and to permit persons
 * to whom the Software is furnished to do so, provided that the above
 * copyright notice(s) and this permission notice appear in all copies of
 * the Software and that both the above copyright notice(s) and this
 * permission notice appear in supporting documentation.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
 * OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
 * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Except as contained in this notice, the name of a copyright holder
 * shall not be used in advertising or otherwise to promote the sale, use
 * or other dealings in this Software without prior written authorization
 * of the copyright holder.
 *
 */

diff -urp driver/lock.c driver/lock.c
--- driver/lock.c	2008-03-05 16:46:55.613177200 -0800
+++ driver/lock.c	2008-03-05 16:04:40.510841000 -0800
@@ -443,13 +443,18 @@ spawn_external_passwd_process (saver_inf
   int stdin_pipe[2]  = { -1, -1 };
   int stdout_pipe[2] = { -1, -1 };
 
-  si->passwd_pid = 0;
   pw->stdin_fd = pw->stdout_fd = -1;
   pw->got_windowid = False;
 
   if (si->prefs.verbose_p)
      fprintf(stderr, "-->spawn_external_passwd()\n");
-
+  if (si->passwd_pid>0) {
+        if (si->prefs.verbose_p)
+           fprintf(stderr,"pid %d still exists.  Killing it with SIGKILL\n",
+                        si->passwd_pid);
+        kill(si->passwd_pid,SIGKILL);
+  }
+  si->passwd_pid = 0;
   if (pipe (stdin_pipe) < 0)
    {
     perror ("pipe(stdin_pipe) failed!");
