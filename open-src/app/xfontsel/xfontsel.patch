diff -urp -x '*~' -x '*.orig' xfontsel.c xfontsel.c
--- xfontsel.c	2009-10-16 14:39:19.000000000 -0700
+++ xfontsel.c	2011-01-28 17:56:03.979720384 -0800
@@ -54,6 +54,9 @@ Modified: Mark Leisher <mleisher@crl.nms
 #include <X11/Xfuncs.h>
 #include "ULabel.h"
 
+#include <libintl.h>
+#include <X11/Xlocale.h>
+
 #define MIN_APP_DEFAULTS_VERSION 1
 #define FIELD_COUNT 14
 #define DELIM '-'
@@ -152,24 +155,25 @@ static XrmOptionDescRec options[] = {
 
 static void Syntax(char *call)
 {
-    fprintf (stderr, "usage:  %s [-options ...] -fn font\n\n", call);
-    fprintf (stderr, "where options include:\n");
-    fprintf (stderr,
-	"    -display dpy           X server to contact\n");
-    fprintf (stderr, 
-	"    -geometry geom         size and location of window\n");
-    fprintf (stderr, 
-	"    -pattern fontspec      font name pattern to match against\n");
-    fprintf (stderr, 
-	"    -print                 print selected font name on exit\n");
-    fprintf (stderr, 
-	"    -sample string         sample text to use for 1-byte fonts\n");
-    fprintf (stderr, 
-	"    -sample16 string       sample text to use for 2-byte fonts\n");
-    fprintf (stderr,
-	"    -sampleUCS string      sample text to use for ISO10646 fonts\n");
-    fprintf (stderr, 
-	"    -scaled                use scaled instances of fonts\n");
+    /* Internationalize these strings for Bug:      4363521 Jhobson 6/9/00 */
+    fprintf (stderr, gettext("usage:  %s [-options ...] -fn font\n\n"), call);
+    fprintf (stderr, gettext("where options include:\n"));
+    fprintf (stderr, "    -display ");
+    fprintf (stderr, gettext("display       X server to contact\n"));
+    fprintf (stderr, "    -geometry ");
+    fprintf (stderr, gettext("geometry     size and location of window\n"));
+    fprintf (stderr, "    -pattern ");
+    fprintf (stderr, gettext("fontspec      font name pattern to match against\n"));
+    fprintf (stderr, "    -print ");
+    fprintf (stderr, gettext("print selected font name on exit\n"));
+    fprintf (stderr, "    -sample ");
+    fprintf (stderr, gettext("string         sample text to use for 1-byte fonts\n"));
+    fprintf (stderr, "    -sample16 ");
+    fprintf (stderr, gettext("string       sample text to use for 2-byte fonts\n"));
+    fprintf (stderr, "    -sampleUCS ");
+    fprintf (stderr, gettext("string      sample text to use for ISO10646 fonts\n"));
+    fprintf (stderr, "    -scaled ");
+    fprintf (stderr, gettext("do use scaled instances of fonts\n"));
     fprintf (stderr, "\n");
     exit (1);
 }
@@ -263,10 +267,28 @@ main(int argc, char **argv)
 {
     Widget topLevel, pane;
 
+    /*
+     * Set up internationalize message for bug: 4363521   Jhobson 8/23/00
+     */
+    char *domaindir;
+
     XtSetLanguageProc(NULL, (XtLanguageProc) NULL, NULL);
 
     topLevel = XtAppInitialize(&appCtx, "XFontSel", options, XtNumber(options),
 			       &argc, argv, NULL, NULL, 0);
+    /*
+     * Set up internationalize message for bug: 4363521    Jhobson 8/23/00
+     *
+     * Do this after the AppInitialize since setlocale is setup
+     * by XtSetLanguageProc, but does not occur until XtAppInitialize
+     * happens. (Goofy X server)
+     */
+    textdomain("xfontsel");
+
+    if((domaindir = getenv("TEXTDOMAINDIR")) == NULL){
+        domaindir = getenv("XLOCALEDIR");
+    }
+    bindtextdomain("xfontsel", domaindir);
 
     if (argc != 1) Syntax(argv[0]);
 
@@ -277,12 +299,15 @@ main(int argc, char **argv)
     XtGetApplicationResources( topLevel, (XtPointer)&AppRes,
 			       resources, XtNumber(resources), NZ );
     if (AppRes.app_defaults_version < MIN_APP_DEFAULTS_VERSION) {
+        char message[200];
+        char full_message[300];
 	XrmDatabase rdb = XtDatabase(XtDisplay(topLevel));
-	XtWarning( "app-defaults file not properly installed." );
-	XrmPutLineResource( &rdb,
-"*sampleText*UCSLabel:XFontSel app-defaults file not properly installed;\\n\
-see 'xfontsel' manual page."
-			  );
+        sprintf( message, gettext("app-defaults file not properly installed.") );
+        sprintf( full_message, gettext("%s %s;\\nsee '%s' manual page."),
+                "*sampleText*UCSLabel:XFontSel", message, "xfontsel" );
+
+        XtWarning( message );
+	XrmPutLineResource( &rdb, full_message);
     }
 
     ScheduleWork(GetFontNames, (XtPointer)XtDisplay(topLevel), 0);
@@ -524,7 +549,7 @@ void GetFontNames(XtPointer closure)
 	    }
 	    else
 		XtAppWarning( appCtx, 
-		    "internal error; pattern didn't match first font" );
+		    gettext("internal error; pattern didn't match first font" ));
 	}
 	else {
 	    SetNoFonts();
@@ -1026,11 +1051,11 @@ static void SetCurrentFontCount(void)
     char label[80];
     Arg args[1];
     if (matchingFontCount == 1)
-	strcpy( label, "1 name matches" );
+	strcpy( label, gettext("1 name matches") );
     else if (matchingFontCount)
-	sprintf( label, "%d names match", matchingFontCount );
+	sprintf( label, gettext("%d names match"), matchingFontCount);
     else
-	strcpy( label, "no names match" );
+	strcpy( label, gettext("no names match") );
     XtSetArg( args[0], XtNlabel, label );
     XtSetValues( countLabel, args, ONE );
 }
@@ -1041,9 +1066,9 @@ static void SetParsingFontCount(int coun
     char label[80];
     Arg args[1];
     if (count == 1)
-	strcpy( label, "1 name to parse" );
+	strcpy( label, gettext("1 name to parse") );
     else
-	sprintf( label, "%d names to parse", count );
+	sprintf( label, gettext("%d names to parse"), count );
     XtSetArg( args[0], XtNlabel, label );
     XtSetValues( countLabel, args, ONE );
     FlushXqueue(XtDisplay(countLabel));
@@ -1252,9 +1277,9 @@ void SelectField(Widget w, XtPointer clo
     int field = (long)closure;
     FieldValue *values = fieldValues[field]->value;
     int count = fieldValues[field]->count;
-    printf( "field %d:\n", field );
+    printf(gettext("field %d:\n"), field );
     while (count--) {
-	printf( " %s: %d fonts\n", values->string, values->count );
+	printf( gettext(" %s: %d fonts\n"), values->string, values->count );
 	values++;
     }
     printf( "\n" );
