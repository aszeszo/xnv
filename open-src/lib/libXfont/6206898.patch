# Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
# Use subject to license terms.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, and/or sell copies of the Software, and to permit persons
# to whom the Software is furnished to do so, provided that the above
# copyright notice(s) and this permission notice appear in all copies of
# the Software and that both the above copyright notice(s) and this
# permission notice appear in supporting documentation.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
# OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
# INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
# FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
# NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
# WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# 
# Except as contained in this notice, the name of a copyright holder
# shall not be used in advertising or otherwise to promote the sale, use
# or other dealings in this Software without prior written authorization
# of the copyright holder.

CR6206898: [Xorg] B&H Hebrew (ISO8859-8) Type 1 fonts are missing Hebrew glyphs

The root cause of the problem is that the names used in Type1 fonts
for Hebrew letters are different from the ones used in Xorg libType1.so 
module. In the Type1 fonts stored under
/usr/openwin/lib/locale/iso_8859_8/X11/fonts/Type1, Hebrew letter
names are applied, like "alef" ...."tav". In the libtype1.so module,
the standard unicode names for Hebrew letter are used, like
"afii57664"..."afii57690". So when Xorg loads the Type1 fonts, there
are no name matches for Hebrew letters, which cause hebrew glyphs
missed. In order to fix the problem, a name map table is needed and
SearchDictName() function should be improved to handle this new map
table if Hebrew is detected.

--- src/Type1/fontfcn.c	2006-09-12 07:56:07.000000000 -0700
+++ src/Type1/fontfcn.c	2005-11-04 16:09:12.269912000 -0800
@@ -109,6 +109,38 @@
 /*                return 0 - not found.                               */
 /*                return n - nth element in dictionary.               */
 /***================================================================***/
+#define HNUM 27
+
+char *hebrew[][2] = {
+        {"afii57664", "alef"},
+        {"afii57665", "bet"},
+        {"afii57666", "gimel"},
+        {"afii57667", "dalet"},
+        {"afii57668", "he"},
+        {"afii57669", "vav"},
+        {"afii57670", "zayin"},
+        {"afii57671", "het"},
+        {"afii57672", "tet"},
+        {"afii57673", "yod"},
+        {"afii57674", "kaffinal"},
+        {"afii57675", "kaf"},
+        {"afii57676", "lamed"},
+        {"afii57677", "memfinal"},
+        {"afii57678", "mem"},
+        {"afii57679", "nunfinal"},
+        {"afii57680", "nun"},
+        {"afii57681", "samekh"},
+        {"afii57682", "ayin"},
+        {"afii57683", "pefinal"},
+        {"afii57684", "pe"},
+        {"afii57685", "tsadifinal"},
+        {"afii57686", "tsadi"},
+        {"afii57687", "qof"},
+        {"afii57688", "resh"},
+        {"afii57689", "shin"},
+        {"afii57690", "tav"}
+};
+
 int 
 SearchDictName(psdict *dictP, psobj *keyP)
 {
@@ -126,6 +158,27 @@
         )
        ) return(i);
   }
+  /* Fix for CR6206898 */
+  if(strncmp(keyP->data.valueP, "afii", 4) == 0) {
+      int pos = -1;
+      int size = 0;
+      for(i=0;i<HNUM;i++) {
+        if(strncmp(keyP->data.valueP, hebrew[i][0], keyP->len) == 0) {
+            pos = i;
+            break;
+        }
+      }
+      if(pos ==  -1)
+        return(0);
+      size = strlen(hebrew[pos][1]);
+      for (i=1;i<=n;i++) {
+        if((size == dictP[i].key.len) &&
+           (strncmp(dictP[i].key.data.valueP, hebrew[pos][1], dictP[i].key.len)== 0)) {
+            return(i);
+        }
+      }
+  }
+
   return(0);
 }
 
