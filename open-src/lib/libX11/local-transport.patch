###############################################################################
# Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
# Use subject to license terms.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, and/or sell copies of the Software, and to permit persons
# to whom the Software is furnished to do so, provided that the above
# copyright notice(s) and this permission notice appear in all copies of
# the Software and that both the above copyright notice(s) and this
# permission notice appear in supporting documentation.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
# OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
# INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
# FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
# NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
# WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# 
# Except as contained in this notice, the name of a copyright holder
# shall not be used in advertising or otherwise to promote the sale, use
# or other dealings in this Software without prior written authorization
# of the copyright holder.
#

Backport to libX11-1.1.3 of this fix:

From bf53987eaf0fbd7f7627783fc39e7ee99e8361ba Mon Sep 17 00:00:00 2001
From: Alan Coopersmith <alan.coopersmith@sun.com>
Date: Wed, 18 Jun 2008 20:00:25 -0700
Subject: [PATCH] Rework code to choose local connection types and fallback to others

Adds --with-local-transport-order configure flag if you don't like the
default ordering (which is platform dependent)

Includes fixes for these Sun/Solaris bug ids:
6678250 X Commands returning incorrect display value unix:0.0 not <system>:0.0
<http://bugs.opensolaris.org/bugdatabase/view_bug.do?bug_id=6678250>
6716481 libX11 should prefer Unix domain sockets over named pipes on Solaris
<http://bugs.opensolaris.org/bugdatabase/view_bug.do?bug_id=6716481>
---
 configure.ac  |   26 ++++++++
 src/ConnDis.c |  180 +++++++++++++++++++++++++--------------------------------
 2 files changed, 104 insertions(+), 102 deletions(-)

diff --git a/configure.ac b/configure.ac
index ad0e383..6be37b2 100644
--- a/configure.ac
+++ b/configure.ac
@@ -67,6 +67,32 @@ XTRANS_CONNECTION_FLAGS
 # Secure RPC detection macro from xtrans.m4
 XTRANS_SECURE_RPC_FLAGS
 
+# Preferred order to try transports for local connections
+AC_MSG_CHECKING([what order to try transports in for local connections])
+case $host_os in
+	solaris*)
+		# On Solaris 2.6 through 9, named pipes (LOCAL_TRANS) were
+		# faster than Unix domain sockets, but on Solaris 10 & later,
+		# Unix domain sockets are faster now.
+		DEFAULT_LOCAL_TRANS="UNIX_TRANS,LOCAL_TRANS,TCP_TRANS"
+		;;
+	*)
+		if test "$LOCALCONN" = "yes"; then
+			DEFAULT_LOCAL_TRANS="LOCAL_TRANS,UNIX_TRANS,TCP_TRANS"
+		else
+			DEFAULT_LOCAL_TRANS="UNIX_TRANS,TCP_TRANS"
+		fi
+		;;
+esac
+
+AC_ARG_WITH(local-transport-order,
+	AC_HELP_STRING([--with-local-transport-order=LIST], [preference sorted list of transport types to try for local connections]),
+	[LOCAL_TRANSPORT_LIST=$withval],
+	[LOCAL_TRANSPORT_LIST=$DEFAULT_LOCAL_TRANS])
+AC_DEFINE_UNQUOTED([LOCAL_TRANSPORT_LIST], [$LOCAL_TRANSPORT_LIST],
+   [preference sorted list of transport types to try for local connections])
+AC_MSG_RESULT([$LOCAL_TRANSPORT_LIST])
+
 # Check for dlopen
 AC_MSG_CHECKING([if run-time linking is supported])
 AC_SEARCH_LIBS(dlopen,[dl svld])
diff --git a/src/ConnDis.c b/src/ConnDis.c
index 22e643c..d40bab0 100644
--- a/src/ConnDis.c
+++ b/src/ConnDis.c
@@ -57,10 +57,6 @@ #ifndef X_CONNECTION_RETRIES		/* number 
 #define X_CONNECTION_RETRIES 5
 #endif
 
-#ifdef LOCALCONN
-#include <sys/utsname.h>
-#endif
-
 #include "Xintconn.h"
 
 /* prototypes */
@@ -76,7 +72,7 @@ static void GetAuthorization(
     int *auth_datalenp);
 
 /* functions */
-static char *copystring (char *src, int len)
+static char *copystring (const char *src, int len)
 {
     char *dst = Xmalloc (len + 1);
 
@@ -88,6 +84,17 @@ static char *copystring (char *src, int 
     return dst;
 }
 
+#define Xstrdup(s)	copystring(s, strlen(s))
+
+#ifdef TCPCONN
+# define TCP_TRANS	"tcp"
+#endif
+#ifdef UNIXCONN
+# define UNIX_TRANS	"unix"
+#endif
+#if defined(LOCALCONN) || defined(OS2PIPECONN)
+# define LOCAL_TRANS	"local"
+#endif
 
 /* 
  * Attempts to connect to server, given display name. Returns file descriptor
@@ -150,17 +157,11 @@ _X11TransConnectDisplay (
     char* address = addrbuf;
     XtransConnInfo trans_conn = NULL;	/* transport connection object */
     int connect_stat;
-#if defined(LOCALCONN) || defined(TCPCONN)
+#if defined(LOCALCONN) || defined(UNIXCONN) || defined(TCPCONN)
     Bool reset_hostname = False;	/* Reset hostname? */
-#endif
-#ifdef LOCALCONN
-    struct utsname sys;
-# ifdef UNIXCONN    
-    Bool try_unix_socket = False;	/* Try unix if local fails */
-# endif    
-#endif
-#ifdef TCPCONN
-    char *tcphostname = NULL;		/* A place to save hostname pointer */
+    char *original_hostname = NULL;
+    int local_transport_index = -1;
+    const char *local_transport[] = { LOCAL_TRANSPORT_LIST, NULL };
 #endif
 
     p = display_name;
@@ -226,32 +227,17 @@ #endif
 
     p = lastc;
 
-#ifdef LOCALCONN
+#if defined(LOCALCONN) || defined(UNIXCONN) || defined(TCPCONN)
     /* check if phostname == localnodename AND protocol not specified */
-    if (!pprotocol && (!phostname || (phostname && uname(&sys) >= 0 &&
-	!strncmp(phostname, sys.nodename, 
-	(strlen(sys.nodename) < strlen(phostname) ? 
-	 strlen(phostname) : strlen(sys.nodename))))))
-    {
-	/*
-	 * We'll first attempt to connect using the local transport.  If
-	 * that fails, we'll try again using the Unix socket transport.  If
-	 * this fails (which is the case if sshd X protocol forwarding is
-	 * being used), retry using tcp and this hostname.
-	 */
-#ifdef UNIXCONN
-	try_unix_socket = True;
-#endif
-#ifdef TCPCONN
-	if (phostname)
-	    tcphostname = copystring(phostname, strlen(phostname));
-	else
-	    tcphostname = copystring("localhost", 9);
-#endif
-	if (!phostname)
+    if (!pprotocol && phostname) {
+	char localhostname[256];
+
+	if ((_XGetHostname (localhostname, sizeof localhostname) > 0)
+	    && (strcmp(phostname, localhostname) == 0)) {
+	    original_hostname = phostname;
+	    phostname = NULL;
 	    reset_hostname = True;
-	Xfree (phostname);
-	phostname = copystring ("unix", 4);
+	}
     }
 #endif
 
@@ -295,59 +281,36 @@
      *     iscreen                  screen number
      *     dnet                     DECnet boolean
      * 
-     * We can now decide which transport to use based on the ConnectionFlags
-     * build parameter the hostname string.  If phostname is NULL or equals
-     * the string "local", then choose the best transport.  If phostname
-     * is "unix", then choose BSD UNIX domain sockets (if configured).
+     * We can now decide which transport to use based on the defined
+     * connection types and the hostname string.
+     * If phostname & pprotocol are NULL, then choose the best transport.
+     * If phostname is "unix" & pprotocol is NULL, then choose UNIX domain
+     * sockets (if configured).
      */
 
 #if defined(TCPCONN) || defined(UNIXCONN) || defined(LOCALCONN) || defined(MNX_TCPCONN) || defined(OS2PIPECONN)
     if (!pprotocol) {
+#if defined(UNIXCONN)
+	if (phostname && (strcmp (phostname, "unix") == 0)) {
+	    Xfree(pprotocol);
+	    pprotocol = copystring ("unix", 4);
+	} else
+#endif
 	if (!phostname) {
-#if defined(UNIXCONN) || defined(LOCALCONN) || defined(OS2PIPECONN)
-	    pprotocol = copystring ("local", 5);
-#if defined(TCPCONN)
-	    tcphostname = copystring("localhost", 9);
-#endif
-	}
-	else
-	{
-#endif
+	    if (local_transport[0] != NULL) {
+		pprotocol = Xstrdup(local_transport[0]);
+		local_transport_index = 0;
+	    }
+	}
+
+	if (!pprotocol) { /* if still not found one, tcp is our last resort */
 	    pprotocol = copystring ("tcp", 3);
 	}
     }
 #endif
 
-#if defined(UNIXCONN) || defined(LOCALCONN) || defined(OS2PIPECONN)
-    /*
-     * Now that the defaults have been established, see if we have any 
-     * special names that we have to override:
-     *
-     *     :N         =>     if UNIXCONN then unix-domain-socket
-     *     ::N        =>     if UNIXCONN then unix-domain-socket
-     *     unix:N     =>     if UNIXCONN then unix-domain-socket
-     *
-     * Note that if UNIXCONN isn't defined, then we can use the default
-     * transport connection function set above.
-     */
 
-    if (!phostname) {
-#ifdef apollo
-	;   /* Unix domain sockets are *really* bad on apollos */
-#else
-	if( pprotocol ) Xfree(pprotocol);
-	pprotocol = copystring ("local", 5);
-#endif
-    }
-    else if (strcmp (phostname, "unix") == 0) {
-	if( pprotocol ) Xfree(pprotocol);
-	pprotocol = copystring ("local", 5);
-    }
-#endif
-
-#if defined(TCPCONN)
   connect:
-#endif
     /*
      * This seems kind of backwards, but we need to put the protocol,
      * host, and port back together to pass to _X11TransOpenCOTSClient().
@@ -434,14 +398,14 @@
      *
      *     [host] : [:] dpy . scr \0
      */
-#if defined(LOCALCONN) || defined(TCPCONN)
+#if defined(LOCALCONN) || defined(TCPCONN) || defined(UNIXCONN)
     /*
      *  If we computed the host name, get rid of it so that
      *  XDisplayString() and XDisplayName() agree.
      */ 
-    if (reset_hostname) {
+    if (reset_hostname && (phostname != original_hostname)) {
 	Xfree (phostname);
-	phostname = NULL;
+	phostname = original_hostname;
     }
 #endif
     len = ((phostname ? strlen(phostname) : 0) + 1 + (dnet ? 1 : 0) +
@@ -460,8 +424,8 @@ #endif
     if (phostname) Xfree (phostname);
     if (pdpynum) Xfree (pdpynum);
     if (pscrnum) Xfree (pscrnum);
-#ifdef TCPCONN
-    if (tcphostname) Xfree (tcphostname);
+#if defined(LOCALCONN) || defined(UNIXCONN) || defined(TCPCONN)
+    if (original_hostname) Xfree (original_hostname);
 #endif
 
     GetAuthorization(trans_conn, family, (char *) saddr, saddrlen, idisplay,
@@ -479,24 +442,36 @@
     if (phostname) Xfree (phostname);
     if (address && address != addrbuf) { Xfree(address); address = addrbuf; }
 
-#if defined(LOCALCONN) && defined(UNIXCONN)
-    if (try_unix_socket) {
-	pprotocol = copystring ("unix", 4);
-	phostname = NULL;
-	try_unix_socket = False; /* Do this only once */
-	goto connect;
-    }
-#endif
-    
-#if defined(TCPCONN)
-    if (tcphostname) {
-	pprotocol = copystring("tcp", 3);
-	phostname = tcphostname;
-	tcphostname = NULL;
-	reset_hostname = True;
-	goto connect;
-    }
-#endif
+#if defined(LOCALCONN) || defined(UNIXCONN) || defined(TCPCONN)
+    /* If connecting to the local machine, and we failed, try again with
+     * the next transport type available, if there is one.
+     */
+    if (local_transport_index >= 0) {
+	if (local_transport[++local_transport_index] != NULL) {
+	    pprotocol = Xstrdup(local_transport[local_transport_index]);
+#ifdef TCPCONN
+	    if (strcmp(pprotocol, "tcp") == 0) {
+		if (original_hostname != NULL) {
+		    phostname = original_hostname;
+		    original_hostname = NULL;
+		} else {
+		    phostname = copystring("localhost", 9);
+		}
+	    } else
+#endif /* TCPCONN */
+	    {
+		if ((phostname != NULL) && (original_hostname == NULL)) {
+		    original_hostname = phostname;
+		}
+		phostname = NULL;
+	    }
+	    goto connect;
+	}
+    }
+
+    /* No more to try, we've failed all available local transports */
+    if (original_hostname) Xfree(original_hostname);
+#endif /* LOCALCONN || UNIXCONN || TCPCONN */
 
     if (pdpynum) Xfree (pdpynum);
     if (pscrnum) Xfree (pscrnum);

-- 
1.4.1

