###############################################################################
# Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
# Use subject to license terms.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, and/or sell copies of the Software, and to permit persons
# to whom the Software is furnished to do so, provided that the above
# copyright notice(s) and this permission notice appear in all copies of
# the Software and that both the above copyright notice(s) and this
# permission notice appear in supporting documentation.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
# OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
# INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
# FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
# NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
# WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# 
# Except as contained in this notice, the name of a copyright holder
# shall not be used in advertising or otherwise to promote the sale, use
# or other dealings in this Software without prior written authorization
# of the copyright holder.
#

4614834: Xlib color functions are not MT-safe

In a multithreaded Xlib client:

    * concurrent access to XAllocNamedColor() make the client crash
    * concurrent access to XLookupColor() make the client crash

The cause of the problem is that in multithread environment some data
in XLookupColor() and XAllocNamedColor() can be accessed/modified at
same time by multi threads. Adding some lock and unlock code to make
sure only one thread can access the data at one time fixed the
problem.

diff -urp -x '*~' -x '*.orig' src/GetColor.c src/GetColor.c
--- src/GetColor.c	2007-05-16 08:34:44.000000000 -0700
+++ src/GetColor.c	2008-02-12 21:00:49.846700000 -0800
@@ -57,12 +57,14 @@ XColor *exact_def) /* RETURN */
     if ((ccc = XcmsCCCOfColormap(dpy, cmap)) != (XcmsCCC)NULL) {
 	const char *tmpName = colorname;
 
+	LockDisplay(dpy);
 	switch (_XcmsResolveColorString(ccc, &tmpName, &cmsColor_exact,
 					XcmsRGBFormat)) {
 	case XcmsSuccess:
 	case XcmsSuccessWithCompression:
 	    _XcmsRGB_to_XColor(&cmsColor_exact, exact_def, 1);
 	    memcpy((char *)hard_def, (char *)exact_def, sizeof(XColor));
+	    UnlockDisplay(dpy);
 	    ret = XAllocColor(dpy, cmap, hard_def);
 	    exact_def->pixel = hard_def->pixel;
 	    return(ret);
@@ -75,6 +77,7 @@ XColor *exact_def) /* RETURN */
 	     */
 	    break;
 	}
+	UnlockDisplay(dpy);
     }
 
     /*
diff -urp -x '*~' -x '*.orig' src/LookupCol.c src/LookupCol.c
--- src/LookupCol.c	2007-05-16 08:34:44.000000000 -0700
+++ src/LookupCol.c	2008-02-12 21:00:49.847158000 -0800
@@ -55,6 +55,7 @@ XLookupColor (
 	if ((ccc = XcmsCCCOfColormap(dpy, cmap)) != (XcmsCCC)NULL) {
 	    const char *tmpName = spec;
 
+	    LockDisplay(dpy);
 	    switch (_XcmsResolveColorString(ccc, &tmpName, &cmsColor_exact,
 					    XcmsRGBFormat)) {
 	    case XcmsSuccess:
@@ -62,6 +63,7 @@ XLookupColor (
 		_XcmsRGB_to_XColor(&cmsColor_exact, def, 1);
 		memcpy((char *)scr, (char *)def, sizeof(XColor));
 		_XUnresolveColor(ccc, scr);
+		UnlockDisplay(dpy);
 		return(1);
 	    case XcmsFailure:
 	    case _XCMS_NEWNAME:
@@ -72,6 +74,7 @@ XLookupColor (
 		 */
 		break;
 	    }
+	    UnlockDisplay(dpy);
 	}
 
 	/*
