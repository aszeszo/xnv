diff -urp -x '*~' -x '*.orig' src/solx_devfs.c src/solx_devfs.c
--- src/solx_devfs.c	2010-11-21 11:13:33.000000000 -0800
+++ src/solx_devfs.c	2011-02-02 20:56:47.794721917 -0800
@@ -118,6 +118,8 @@ static int pci_device_solx_devfs_write( 
     const void * data, pciaddr_t offset, pciaddr_t size,
     pciaddr_t * bytes_written );
 
+static int pci_device_solx_devfs_boot_vga(struct pci_device *dev);
+
 static int probe_dev(nexus_t *nexus, pcitool_reg_t *prg_p,
 		     struct pci_system *pci_sys);
 
@@ -143,7 +145,8 @@ static const struct pci_system_methods s
     .read = pci_device_solx_devfs_read,
     .write = pci_device_solx_devfs_write,
 
-    .fill_capabilities = pci_fill_capabilities_generic
+    .fill_capabilities = pci_fill_capabilities_generic,
+    .boot_vga = pci_device_solx_devfs_boot_vga
 };
 
 static nexus_t *
@@ -706,12 +709,12 @@ pci_device_solx_devfs_probe( struct pci_
     pciaddr_t bytes;
     int len = 0;
     uint ent = 0;
+    struct pci_device_private *priv =
+	    (struct pci_device_private *) dev;
 
     err = pci_device_solx_devfs_read( dev, config, 0, 256, & bytes );
 
     if ( bytes >= 64 ) {
-	struct pci_device_private *priv =
-	    (struct pci_device_private *) dev;
 
 	dev->vendor_id = (uint16_t)config[0] + ((uint16_t)config[1] << 8);
 	dev->device_id = (uint16_t)config[2] + ((uint16_t)config[3] << 8);
@@ -745,6 +748,16 @@ pci_device_solx_devfs_probe( struct pci_
 	}
     }
     if (args.node != DI_NODE_NIL) {
+	int *prop;
+
+	priv->is_primary = 0;
+
+    	if (di_prop_lookup_ints(DDI_DEV_T_ANY,
+	    args.node, "primary-controller", &prop) >= 1) {
+	        if (prop[0])
+			priv->is_primary = 1;
+
+	}
 	/*
 	 * It will succeed for sure, because it was
 	 * successfully called in find_target_node
@@ -755,6 +768,7 @@ pci_device_solx_devfs_probe( struct pci_
 
     }
 
+
     if (len <= 0)
 	goto cleanup;
 
@@ -785,22 +799,33 @@ pci_device_solx_devfs_probe( struct pci_
     }
 
     /*
-     * Solaris has its own BAR index.
+     * Each BAR address get its own region slot in sequence.
+     * 32 bit BAR:
+     * BAR 0x10 -> slot0, BAR 0x14 -> slot1...
+     * 64 bit BAR:
+     * BAR 0x10 -> slot0, BAR 0x18 -> slot2...,
+     * slot1 is part of BAR 0x10
      * Linux give two region slot for 64 bit address.
      */
     for (i = 0; i < len; i = i + CELL_NUMS_1275) {
 
 	reg = (pci_regspec_t *)&regbuf[i];
 	ent = reg->pci_phys_hi & 0xff;
+
+	if (ent > PCI_CONF_BASE5) {
+		fprintf(stderr, "error ent = %d\n", ent);
+		break;
+	}
 	/*
 	 * G35 broken in BAR0
 	 */
-	ent = (ent - PCI_CONF_BASE0) >> 2;
-	if (ent >= 6) {
-	    fprintf(stderr, "error ent = %d\n", ent);
-	    break;
-	}
-
+	if (ent < PCI_CONF_BASE0) {
+	/*
+	 * VGA resource here and ignore it
+	 */                                                             
+		break;
+	} else
+		ent = (ent - PCI_CONF_BASE0) >> 2;
 	/*
 	 * non relocatable resource is excluded
 	 * such like 0xa0000, 0x3b0. If it is met,
@@ -1023,3 +1048,11 @@ pci_device_solx_devfs_map_range(struct p
 
     return err;
 }
+static int pci_device_solx_devfs_boot_vga(struct pci_device *dev)
+{
+	struct pci_device_private *priv =
+	    (struct pci_device_private *) dev;
+
+	return (priv->is_primary);
+
+}
