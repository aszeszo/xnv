diff --git a/src/pciaccess_private.h b/src/pciaccess_private.h
index fea9c9f..6996f8d 100644
--- a/src/pciaccess_private.h
+++ b/src/pciaccess_private.h
@@ -146,6 +146,7 @@ struct pci_device_private {
     struct pci_device_mapping *mappings;
     unsigned num_mappings;
     /*@}*/
+    int is_primary;
 };
 
 
diff --git a/src/solx_devfs.c b/src/solx_devfs.c
index 4069dc2..504de9e 100644
--- a/src/solx_devfs.c
+++ b/src/solx_devfs.c
@@ -796,6 +796,18 @@ pci_device_solx_devfs_probe( struct pci_device * dev )
 #ifdef __sparc
 	di_minor_t minor;
 #endif
+	int *prop;
+	struct pci_device_private *priv =
+	    (struct pci_device_private *) dev;
+
+	priv->is_primary = 0;
+
+    	if (di_prop_lookup_ints(DDI_DEV_T_ANY,
+	    args.node, "primary-controller", &prop) >= 1) {
+	        if (prop[0])
+			priv->is_primary = 1;
+
+	}
 
 #ifdef __sparc
 	if (minor = di_minor_next(args.node, DI_MINOR_NIL))
@@ -850,22 +862,33 @@ pci_device_solx_devfs_probe( struct pci_device * dev )
     }
 
     /*
-     * Solaris has its own BAR index.
+     * Each BAR address get its own region slot in sequence.
+     * 32 bit BAR:
+     * BAR 0x10 -> slot0, BAR 0x14 -> slot1...
+     * 64 bit BAR:
+     * BAR 0x10 -> slot0, BAR 0x18 -> slot2...,
+     * slot1 is part of BAR 0x10
      * Linux give two region slot for 64 bit address.
      */
     for (i = 0; i < len; i = i + CELL_NUMS_1275) {
 
 	reg = (pci_regspec_t *)&regbuf[i];
 	ent = reg->pci_phys_hi & 0xff;
+
+	if (ent > PCI_CONF_BASE5) {
+		fprintf(stderr, "error ent = %d\n", ent);
+		break;
+	}
 	/*
 	 * G35 broken in BAR0
 	 */
-	ent = (ent - PCI_CONF_BASE0) >> 2;
-	if (ent >= 6) {
-	    fprintf(stderr, "error ent = %d\n", ent);
-	    break;
-	}
-
+	if (ent < PCI_CONF_BASE0) {
+	/*
+	 * VGA resource here and ignore it
+	 */                                                             
+		break;
+	} else
+		ent = (ent - PCI_CONF_BASE0) >> 2;
 	/*
 	 * non relocatable resource is excluded
 	 * such like 0xa0000, 0x3b0. If it is met,
@@ -1127,6 +1150,15 @@ pci_device_solx_devfs_write( struct pci_device * dev, const void * data,
     return (err);
 }
 
+static int pci_device_solx_devfs_boot_vga(struct pci_device *dev)
+{
+	struct pci_device_private *priv =
+	    (struct pci_device_private *) dev;
+
+	return (priv->is_primary);
+
+}
+
 static struct pci_io_handle *
 pci_device_solx_devfs_open_legacy_io(struct pci_io_handle *ret,
 				     struct pci_device *dev,
@@ -1259,6 +1291,7 @@ static const struct pci_system_methods solx_devfs_methods = {
     .write = pci_device_solx_devfs_write,
 
     .fill_capabilities = pci_fill_capabilities_generic,
+    .boot_vga = pci_device_solx_devfs_boot_vga,
 
     .open_legacy_io = pci_device_solx_devfs_open_legacy_io,
     .read32 = pci_device_solx_devfs_read32,
