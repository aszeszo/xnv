This combined patch includes the fixes for:
Bug 5048680, 5067795: Add embolden/italicize support for CJK
Bug 5071008: darken chinese characters
Bug 5104233: Chinese font rendering is not correct for certain sizes

diff -urp -x '*~' -x '*.orig' src/xftfreetype.c src/xftfreetype.c
--- src/xftfreetype.c	2006-12-07 02:17:19.000000000 -0800
+++ src/xftfreetype.c	2007-06-11 17:36:56.663306000 -0700
@@ -371,6 +371,8 @@ XftUnlockFace (XftFont *public)
     _XftUnlockFile (font->info.file);
 }
 
+int darken_candidate = 0;
+
 static FcBool
 XftFontInfoFill (Display *dpy, _Xconst FcPattern *pattern, XftFontInfo *fi)
 {
@@ -387,6 +389,7 @@ XftFontInfoFill (Display *dpy, _Xconst F
     FcChar32	    hash, *hashp;
     FT_Face	    face;
     int		    nhash;
+    FcBool          embed; /* Use embededbitmap switch */
 
     if (!info)
 	return FcFalse;
@@ -430,6 +433,35 @@ XftFontInfoFill (Display *dpy, _Xconst F
     if (FcPatternGetDouble (pattern, FC_PIXEL_SIZE, 0, &dsize) != FcResultMatch)
 	goto bail1;
 
+    /*
+     * Determine if user wants text darker than normally created.
+     */
+    switch ( FcPatternGetBool (pattern, "darken", 0, &darken_candidate)) {
+    case FcResultNoMatch:
+        darken_candidate = FcFalse;
+        break;
+    case FcResultMatch:
+	if ( dsize < 24 )
+	{
+            if (FcPatternGetInteger (pattern, "darken_value", 0, &darken_candidate) != FcResultMatch)
+		darken_candidate = 6;
+
+	    if ( darken_candidate < 1 || darken_candidate > 9 )
+		darken_candidate = 6;
+	}
+	else
+            darken_candidate = FcFalse;
+        break;
+    default:
+        goto bail1;
+    }
+
+    /*
+     * Add By Firefly (firefly@firefly.idv.tw)
+     */
+    if (dsize != (long)dsize) /* for speed - avoid math compute */
+        dsize = ((dsize - (long)dsize) >= 0.5) ? (long)dsize + 1: (long)dsize;
+
     if (FcPatternGetDouble (pattern, FC_ASPECT, 0, &aspect) != FcResultMatch)
 	aspect = 1.0;
     
@@ -510,8 +542,36 @@ XftFontInfoFill (Display *dpy, _Xconst F
     fi->load_flags = FT_LOAD_DEFAULT;
 
     /* disable bitmaps when anti-aliasing or transforming glyphs */
-    if (fi->antialias || fi->transform)
+
+    /*------------------------------------------------------------------
+     * Add by Firefly ( firefly@firefly.idv.tw)
+     * enable bitmaps first if requested
+     */
+    switch ( FcPatternGetBool (pattern, "prefer_bitmap", 0, &embed)) {
+    case FcResultNoMatch:
+        embed = FcTrue;
+        break;
+    case FcResultMatch:
+        break;
+    default:
+        goto bail1;
+    }
+
+    if ((fi->antialias && !embed ) || fi->transform)
 	fi->load_flags |= FT_LOAD_NO_BITMAP;
+
+    /*
+     * Check for weight
+     */
+    switch (FcPatternGetInteger(pattern, FC_WEIGHT, 0, &fi->weight)) {
+    case FcResultNoMatch:
+        fi->weight = FC_WEIGHT_MEDIUM;
+        break;
+    case FcResultMatch:
+        break;
+    default:
+        goto bail1;
+    }
     
     /* disable hinting if requested */
     switch (FcPatternGetBool (pattern, FC_HINTING, 0, &hinting)) {
diff -urp -x '*~' -x '*.orig' src/xftglyphs.c src/xftglyphs.c
--- src/xftglyphs.c	2006-12-07 02:17:19.000000000 -0800
+++ src/xftglyphs.c	2007-06-11 17:36:56.666886000 -0700
@@ -99,6 +99,9 @@ XftFontLoadGlyphs (Display	    *dpy,
     FT_Vector	    vector;
     Bool	    subpixel = False;
     FT_Face	    face;
+    int             bold_advance_width = 0;
+    int             darken = 0;
+    extern int      darken_candidate;
 
     if (!info)
 	return;
@@ -108,6 +111,15 @@ XftFontLoadGlyphs (Display	    *dpy,
     if (!face)
 	return;
 
+    /*-------------------------------------------------------
+     * Add by Firefly (firefly@firefly.idv.tw)
+     *------------------------------------------------------*/
+    if (font->info.weight >= FC_WEIGHT_BOLD &&
+       !(face->style_flags & FT_STYLE_FLAG_BOLD))
+    {
+       bold_advance_width = 64;
+    }
+
     matrix.xx = matrix.yy = 0x10000L;
     matrix.xy = matrix.yx = 0;
 
@@ -132,6 +144,10 @@ XftFontLoadGlyphs (Display	    *dpy,
     while (nglyph--)
     {
 	glyphindex = *glyphs++;
+
+	if ( glyphindex > 256 && darken_candidate )
+	    darken = 1;
+
 	xftg = font->glyphs[glyphindex];
 	if (!xftg)
 	    continue;
@@ -219,41 +235,50 @@ XftFontLoadGlyphs (Display	    *dpy,
 	    bottom = FLOOR( glyphslot->metrics.horiBearingY - glyphslot->metrics.height );
 	}
 
-	width = TRUNC(right - left);
+	width = TRUNC(right - left) + (bold_advance_width/64);
 	height = TRUNC( top - bottom );
 
 	/*
 	 * Clip charcell glyphs to the bounding box
 	 * XXX transformed?
 	 */
+        /* Modified by Firefly (firefly@firefly.idv.tw)
+         *
+         * Don't use "font->public.max_advance_width", because CJK fonts
+         * have both half-width and full-width.
+         * So must use "glyphslot->metrics.vertAdvance" &
+         * "glyphslot->metrics.horiAdvance" in order to get correctly width.
+         *----------------------------------------------------------------*/
+        glyphslot->metrics.horiAdvance += bold_advance_width;
+
 	if (font->info.spacing >= FC_CHARCELL && !font->info.transform)
 	{
 	    if (font->info.load_flags & FT_LOAD_VERTICAL_LAYOUT)
 	    {
-		if (TRUNC(bottom) > font->public.max_advance_width)
+		if (bottom > glyphslot->metrics.vertAdvance)
 		{
 		    int adjust;
     
-		    adjust = bottom - (font->public.max_advance_width << 6);
+		    adjust = bottom - glyphslot->metrics.vertAdvance;
 		    if (adjust > top)
 			adjust = top;
 		    top -= adjust;
 		    bottom -= adjust;
-		    height = font->public.max_advance_width;
+		    height = TRUNC(glyphslot->metrics.vertAdvance);
 		}
 	    }
 	    else
 	    {
-		if (TRUNC(right) > font->public.max_advance_width)
+		if (right > glyphslot->metrics.horiAdvance)
 		{
 		    int adjust;
     
-		    adjust = right - (font->public.max_advance_width << 6);
+		    adjust = right - glyphslot->metrics.horiAdvance;
 		    if (adjust > left)
 			adjust = left;
 		    left -= adjust;
 		    right -= adjust;
-		    width = font->public.max_advance_width;
+		    width = TRUNC(glyphslot->metrics.horiAdvance);
 		}
 	    }
 	}
@@ -277,11 +302,11 @@ XftFontLoadGlyphs (Display	    *dpy,
 		if (font->info.load_flags & FT_LOAD_VERTICAL_LAYOUT)
 		{
 		    vector.x = 0;
-		    vector.y = -face->size->metrics.max_advance;
+		    vector.y = -glyphslot->metrics.vertAdvance;
 		}
 		else
 		{
-		    vector.x = face->size->metrics.max_advance;
+		    vector.x = glyphslot->metrics.horiAdvance;
 		    vector.y = 0;
 		}
 		FT_Vector_Transform (&vector, &font->info.matrix);
@@ -293,18 +318,18 @@ XftFontLoadGlyphs (Display	    *dpy,
 		if (font->info.load_flags & FT_LOAD_VERTICAL_LAYOUT)
 		{
 		    xftg->metrics.xOff = 0;
-		    xftg->metrics.yOff = -font->public.max_advance_width;
+		    xftg->metrics.yOff = -(glyphslot->metrics.vertAdvance >> 6);
 		}
 		else
 		{
-		    xftg->metrics.xOff = font->public.max_advance_width;
+		    xftg->metrics.xOff = glyphslot->metrics.horiAdvance >> 6;
 		    xftg->metrics.yOff = 0;
 		}
 	    }
 	}
 	else
 	{
-	    xftg->metrics.xOff = TRUNC(ROUND(glyphslot->advance.x));
+	    xftg->metrics.xOff = TRUNC(ROUND(glyphslot->advance.x + bold_advance_width));
 	    xftg->metrics.yOff = -TRUNC(ROUND(glyphslot->advance.y));
 	}
 	
@@ -405,7 +430,75 @@ XftFontLoadGlyphs (Display	    *dpy,
 			(int) glyphindex);
 	    continue;
 	}
-	
+
+	if ( font->info.antialias && darken )
+	{
+	    int h = height * vmul;
+            int w = font->info.antialias ? pitch : pitch * 8;
+            unsigned char *p = bufBitmap;
+	    int i, x, y;
+	    int steps = 10 - darken_candidate;
+	    int max   = 255 / steps;
+
+	    for ( y = 0; y < h; y++ )
+	    {
+		for ( x = 0; x < w; x++ )
+		{
+		    int val = p[x] / steps;
+/**
+		    if ( p[x] )
+		    {
+		        p[x] += 30;
+		        if ( p[x] > 255 )
+			    p[x] = 255;
+		    }
+**/
+		    p[x] += ( p[x] > 30 ? max-val: 0 );
+/**
+		    p[x] += ( p[x] ? ((val > max - val)?max-val:val): 0 );
+**/
+		}
+                p += w;
+	    }
+	}
+
+        /*-------------------------------------------------------
+         * Add by Firefly (firefly@firefly.idv.tw)
+         * some code from XFree86's X-TrueType module.
+         *------------------------------------------------------*/
+        if ( bold_advance_width)
+        {
+            int h = height * vmul;
+            int w = font->info.antialias ? pitch : pitch * 8;
+            unsigned char *p = bufBitmap;
+            unsigned char lsb, tmp;
+            int i, x, y;
+            
+            for (y = 0; y < h ; y++)
+            {
+                if (font->info.antialias)
+                {
+                    for (x = w; x > 0; x--)
+                    {
+                        if ( p[x] < p[x-1] )
+                            p[x] = p[x-1];
+                    }
+                }
+                else
+                {
+                    lsb = 0;
+
+                    for (x = 0; x < w; x++)
+                    {
+                        tmp = p[x] << 7;
+                        p[x] |= (p[x] >> 1) | lsb;
+                        lsb = tmp;
+                    }
+                }
+                p += w;
+            }
+	}
+
 	if (XftDebug() & XFT_DBG_GLYPH)
 	{
 	    printf ("glyph %d:\n", (int) glyphindex);
diff -urp -x '*~' -x '*.orig' src/xftint.h src/xftint.h
--- src/xftint.h	2006-12-07 02:17:19.000000000 -0800
+++ src/xftint.h	2007-06-11 17:36:56.667617000 -0700
@@ -157,6 +157,7 @@ struct _XftFontInfo {
     int			spacing;
     FcBool		minspace;
     int			char_width;
+    int                 weight;
 };
 
 /*
