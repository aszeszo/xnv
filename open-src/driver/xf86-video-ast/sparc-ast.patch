diff --git a/src/Makefile.am b/src/Makefile.am
index 4cd7075..58274df 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -42,4 +42,5 @@ ast_drv_la_SOURCES =	\
 	ast_pcirename.h \
 	ast_tool.c 	\
 	ast_vgatool.c 	\
-	ast_vgatool.h
+	ast_vgatool.h	\
+	ast_sparc_driver.c
diff --git a/src/ast.h b/src/ast.h
index 7ceee31..a6af228 100644
--- a/src/ast.h
+++ b/src/ast.h
@@ -20,8 +20,17 @@
  * PERFORMANCE OF THIS SOFTWARE.
  */
 
+#ifndef AST_H
+#define AST_H
+
 #include <string.h>
 #include <stdlib.h>
+#include <sys/visual_io.h>
+
+#ifdef __sparc
+#define __sparc__ 1
+#endif
+
 
 #include "ast_pcirename.h"
 
@@ -90,6 +99,15 @@ typedef CARD32  	ULONG;
 typedef struct _ASTRegRec {
     UCHAR 	ExtCRTC[0x50];
     ULONG	GFX[12];
+
+#if	(defined(__sparc__))
+    UCHAR 	MISC;	
+    UCHAR 	SEQ[4];
+    UCHAR 	CRTC[25];
+    UCHAR 	AR[20];	    
+    UCHAR 	GR[9];
+    UCHAR	DAC[256][3];
+#endif
 } ASTRegRec, *ASTRegPtr;
 
 typedef struct _VIDEOMODE {
@@ -249,12 +267,94 @@ typedef struct _ASTRec {
     Atom		xvGammaRed, xvGammaGreen, xvGammaBlue;
 #endif
 
+#if defined(__sparc__)
+    char 		*deviceName;
+    int  		fd;
+#endif /* __sparc__ */
+
 } ASTRec, *ASTRecPtr, *ASTPtr;
 
 #define ASTPTR(p) ((ASTRecPtr)((p)->driverPrivate))
 
+#if defined(__sparc__)
+#ifndef VIS_GETPCICONFIG
+
+/*
+ * These definitions will be removed when they are included in the
+ * visual_io.h
+ */
+#define VIS_GETVIDEOMODENAME            (VIOC | 12)
+#define VIS_STOREVIDEOMODENAME          (VIOC | 13)
+#define VIS_MAX_VMODE_LEN               48
+
+typedef struct  vis_video_mode {
+        char            mode_name[VIS_MAX_VMODE_LEN];
+        uint32_t        vRefresh;
+        char            pad[96];
+} vis_video_mode_t;
+
+
+#define VIS_GETPCICONFIG		(VIOC | 14)
+
+typedef struct  vis_pci_cfg {
+        uint16_t        VendorID;
+        uint16_t        DeviceID;
+        uint16_t        Command;
+        uint16_t        Status;
+        uint8_t         RevisionID;
+        uint8_t         ProgIF;
+        uint8_t         SubClass;
+        uint8_t         BaseClass;
+
+        uint8_t         CacheLineSize;
+        uint8_t         LatencyTimer;
+        uint8_t         HeaderType;
+        uint8_t         BIST;
+
+        uint32_t        bar[6];
+        uint32_t        CIS;
+        uint16_t        SubVendorID;
+        uint16_t        SubSystemID;
+        uint32_t        ROMBaseAddress;
+
+        uint8_t         CapabilitiesPtr;
+        uint8_t         Reserved_1[3];
+        uint32_t        Reserved_2;
+
+        uint8_t         InterruptLine;
+        uint8_t         InterruptPin;
+        uint8_t         MinimumGrant;
+        uint8_t         MaximumLatency;
+
+        uint8_t         pad[100];
+} vis_pci_cfg_t;
+
+
+#define VIS_SETIOREG                    (VIOC | 17)
+#define VIS_GETIOREG                    (VIOC | 18)
+
+typedef struct vis_io_reg {
+        uchar_t         offset;
+        uchar_t         value;
+} vis_io_reg_t;
+#endif
+
+
+extern struct pci_device *ASTGetPciInfo(ASTRecPtr);
+extern ScrnInfoPtr        ASTAllocScreen(DriverPtr, GDevPtr);
+extern pointer		  ASTMapVidMem(ScrnInfoPtr, unsigned int, PCITAG,
+						unsigned long, unsigned long);
+extern void		  ASTUnmapVidMem(ScrnInfoPtr, pointer, unsigned long);
+extern void		  ASTNotifyModeChanged(ScrnInfoPtr);
+extern void		  ASTSaveHW(ScrnInfoPtr);
+extern void		  ASTRestoreHW(ScrnInfoPtr);
+
+#endif
+
 /* Include Files */
 #include "ast_mode.h"
 #include "ast_vgatool.h"
 #include "ast_2dtool.h"
 #include "ast_cursor.h"
+
+#endif /* AST_H */
diff --git a/src/ast_accel.c b/src/ast_accel.c
index 2d3dab3..74ca45d 100644
--- a/src/ast_accel.c
+++ b/src/ast_accel.c
@@ -189,7 +189,12 @@ ASTAccelInit(ScreenPtr pScreen)
     {    
         infoPtr->SetupForSolidFill = ASTSetupForSolidFill;
         infoPtr->SubsequentSolidFillRect = ASTSubsequentSolidFillRect;
+
+#if defined(__sparc__)
+        infoPtr->SolidFillFlags = NO_PLANEMASK | BIT_ORDER_IN_BYTE_MSBFIRST;
+#else
         infoPtr->SolidFillFlags = NO_PLANEMASK;
+#endif /* __sparc__ */
     } 
         
     /* Solid Lines */
diff --git a/src/ast_cursor.c b/src/ast_cursor.c
index b3f2061..9b7f1c8 100644
--- a/src/ast_cursor.c
+++ b/src/ast_cursor.c
@@ -87,7 +87,11 @@ ASTCursorInit(ScreenPtr pScreen)
 
     infoPtr->Flags = HARDWARE_CURSOR_TRUECOLOR_AT_8BPP |
                      HARDWARE_CURSOR_INVERT_MASK |        
+#if     !defined(__sparc__)
                      HARDWARE_CURSOR_BIT_ORDER_MSBFIRST;
+#else
+                     0;
+#endif
 
     infoPtr->MaxWidth  = MAX_HWC_WIDTH;
     infoPtr->MaxHeight = MAX_HWC_HEIGHT;
diff --git a/src/ast_driver.c b/src/ast_driver.c
index 896f22c..c4afa21 100644
--- a/src/ast_driver.c
+++ b/src/ast_driver.c
@@ -106,7 +106,7 @@ static void ASTFreeScreen(int scrnIndex, int flags);
 static ModeStatus ASTValidMode(int scrnIndex, DisplayModePtr mode, Bool verbose, int flags);
 
 /* Internally used functions */
-static Bool ASTGetRec(ScrnInfoPtr pScrn);
+extern Bool ASTGetRec(ScrnInfoPtr pScrn);
 static void ASTFreeRec(ScrnInfoPtr pScrn);
 static Bool ASTSaveScreen(ScreenPtr pScreen, Bool unblack);
 static Bool ASTCloseScreen(int scrnIndex, ScreenPtr pScreen);
@@ -270,7 +270,7 @@ ASTProbe(DriverPtr drv, int flags)
       return FALSE;
     }
 
-#ifndef XSERVER_LIBPCIACCESS
+#if !defined(XSERVER_LIBPCIACCESS) && !defined(__sparc__)
    /*
     * This probing is just checking the PCI data the server already
     * collected.
@@ -280,6 +280,7 @@ ASTProbe(DriverPtr drv, int flags)
     }
 #endif
 
+#if !defined(__sparc__)
     numUsed = xf86MatchPciInstances(AST_NAME, PCI_VENDOR_AST,
 				   ASTChipsets, ASTPciChipsets,
 				   devSections, numDevSections,
@@ -323,6 +324,37 @@ ASTProbe(DriverPtr drv, int flags)
     } /* end of if flags */	   
 
     free(usedChips);
+#else
+
+    if (flags & PROBE_DETECT) {
+        foundScreen = TRUE;
+    } else {
+        for (i = 0; i < numDevSections; i++) {
+
+	    ScrnInfoPtr pScrn = NULL;
+
+	    /* Allocate new ScrnInfoRec and claim the slot */
+	    if (pScrn = ASTAllocScreen(drv, devSections[i])) {
+		pScrn->driverVersion = AST_VERSION;
+		pScrn->driverName = AST_DRIVER_NAME;
+		pScrn->name = AST_NAME;
+
+		pScrn->Probe = ASTProbe;
+		pScrn->PreInit = ASTPreInit;
+		pScrn->ScreenInit = ASTScreenInit;
+		pScrn->SwitchMode = ASTSwitchMode;
+		pScrn->AdjustFrame = ASTAdjustFrame;
+		pScrn->EnterVT = ASTEnterVT;
+		pScrn->LeaveVT = ASTLeaveVT;
+		pScrn->FreeScreen = ASTFreeScreen;
+		pScrn->ValidMode = ASTValidMode;
+
+		foundScreen = TRUE;
+	    }
+	}
+    }
+    free(devSections);
+#endif
 
     return foundScreen;
 }
@@ -338,7 +370,9 @@ static Bool
 ASTPreInit(ScrnInfoPtr pScrn, int flags)
 {
    EntityInfoPtr pEnt;
+#if !defined(__sparc__)
    vgaHWPtr hwp;
+#endif
    int flags24;
    rgb defaultWeight = { 0, 0, 0 };
       
@@ -355,6 +389,10 @@ ASTPreInit(ScrnInfoPtr pScrn, int flags)
 
    pEnt = xf86GetEntityInfo(pScrn->entityList[0]);
 
+#if defined(__sparc__)
+   pEnt->location.type = BUS_PCI;
+#endif /* __sparc__ */
+
    if (flags & PROBE_DETECT) {
        ASTProbeDDC(pScrn, pEnt->index);
        return TRUE;
@@ -368,19 +406,23 @@ ASTPreInit(ScrnInfoPtr pScrn, int flags)
        return FALSE;
 #endif
 
+#if !(defined(__sparc__))
    /* The vgahw module should be loaded here when needed */
    if (!xf86LoadSubModule(pScrn, "vgahw"))
       return FALSE;
+#endif
 
    /* The fb module should be loaded here when needed */
    if (!xf86LoadSubModule(pScrn, "fb"))
       return FALSE;
    	
+#if !(defined(__sparc__))
    /* Allocate a vgaHWRec */
    if (!vgaHWGetHWRec(pScrn))
        return FALSE;
    hwp = VGAHWPTR(pScrn);
    vgaHWSetStdFuncs(hwp);
+#endif
 
    /* Color Depth Check */
    flags24 = Support32bppFb;
@@ -453,7 +495,12 @@ ASTPreInit(ScrnInfoPtr pScrn, int flags)
    /* Fill AST Info */
    pAST = ASTPTR(pScrn);
    pAST->pEnt    = xf86GetEntityInfo(pScrn->entityList[0]);
+#if !defined(__sparc__)
    pAST->PciInfo = xf86GetPciInfoForEntity(pAST->pEnt->index);
+#else
+   pAST->PciInfo = ASTGetPciInfo(pAST);
+#endif
+
 #ifndef XSERVER_LIBPCIACCESS
    pAST->PciTag  = pciTag(pAST->PciInfo->bus, pAST->PciInfo->device,
 			  pAST->PciInfo->func);
@@ -508,11 +555,13 @@ ASTPreInit(ScrnInfoPtr pScrn, int flags)
      * the vgaHW module to use our relocated i/o ports.
      */
 
+#if !(defined(__sparc__))
 #if GET_ABI_MAJOR(ABI_VIDEODRV_VERSION) < 12
     VGAHWPTR(pScrn)->PIOOffset = /* ... */
 #endif
        	pAST->PIOOffset =
 	pAST->IODBase + PCI_REGION_BASE(pAST->PciInfo, 2, REGION_IO) - 0x380;
+#endif
 	
     pAST->RelocateIO = (IOADDRESS)(PCI_REGION_BASE(pAST->PciInfo, 2, REGION_IO) + pAST->IODBase);
 	
@@ -757,7 +806,9 @@ ASTScreenInit(int scrnIndex, ScreenPtr pScreen, int argc, char **argv)
 {
    ScrnInfoPtr pScrn;
    ASTRecPtr pAST;
+#if (!defined(__sparc__))
    vgaHWPtr hwp;   
+#endif
    VisualPtr visual;
  
    /* for FB Manager */
@@ -766,7 +817,9 @@ ASTScreenInit(int scrnIndex, ScreenPtr pScreen, int argc, char **argv)
 
    pScrn = xf86Screens[pScreen->myNum];
    pAST = ASTPTR(pScrn);
+#if (!defined(__sparc__))
    hwp = VGAHWPTR(pScrn);
+#endif
 
    if (!ASTMapMem(pScrn)) {
       xf86DrvMsg(pScrn->scrnIndex, X_ERROR, "Map FB Memory Failed \n");      	
@@ -795,7 +848,9 @@ ASTScreenInit(int scrnIndex, ScreenPtr pScreen, int argc, char **argv)
 
    }
        
+#if (!defined(__sparc__))
    vgaHWGetIOBase(hwp);
+#endif
 
    vFillASTModeInfo (pScrn);      
 
@@ -836,6 +891,10 @@ ASTScreenInit(int scrnIndex, ScreenPtr pScreen, int argc, char **argv)
               
    }
 
+#if (defined(__sparc__))
+   ASTNotifyModeChanged(pScrn);
+#endif
+
    if (pScrn->bitsPerPixel > 8) {
       /* Fixup RGB ordering */
       visual = pScreen->visuals + pScreen->numVisuals;
@@ -999,7 +1058,9 @@ ASTLeaveVT(int scrnIndex, int flags)
 	
    ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
    ASTRecPtr pAST = ASTPTR(pScrn);
+#if (!defined(__sparc__))
    vgaHWPtr hwp = VGAHWPTR(pScrn);
+#endif
 
 #ifdef	HWC
    if (pAST->pHWCPtr) {
@@ -1022,7 +1083,9 @@ ASTLeaveVT(int scrnIndex, int flags)
    if (pAST->jChipType == AST1180)
        ASTBlankScreen(pScrn, 0);
 
+#if (!defined(__sparc__))
    vgaHWLock(hwp);	
+#endif
 
 }
 
@@ -1030,8 +1093,11 @@ static void
 ASTFreeScreen(int scrnIndex, int flags)
 {
    ASTFreeRec(xf86Screens[scrnIndex]);
+
+#if (!defined(__sparc__))
    if (xf86LoaderCheckSymbol("vgaHWFreeHWRec"))
       vgaHWFreeHWRec(xf86Screens[scrnIndex]);   
+#endif
 }
 
 static ModeStatus
@@ -1122,7 +1188,6 @@ ASTValidMode(int scrnIndex, DisplayModePtr mode, Bool verbose, int flags)
    return Flags;
 }
 
-/* Internal used modules */
 /*
  * ASTGetRec and ASTFreeRec --
  *
@@ -1130,7 +1195,7 @@ ASTValidMode(int scrnIndex, DisplayModePtr mode, Bool verbose, int flags)
  * These two functions create and destroy that private data.
  *
  */
-static Bool
+Bool
 ASTGetRec(ScrnInfoPtr pScrn)
 {
    if (pScrn->driverPrivate)
@@ -1140,6 +1205,8 @@ ASTGetRec(ScrnInfoPtr pScrn)
    return TRUE;
 }
 
+/* Internal used modules */
+
 static void
 ASTFreeRec(ScrnInfoPtr pScrn)
 {
@@ -1171,7 +1238,9 @@ static Bool
 ASTCloseScreen(int scrnIndex, ScreenPtr pScreen)
 {
    ScrnInfoPtr pScrn = xf86Screens[scrnIndex];
+#if (!defined(__sparc__))
    vgaHWPtr hwp = VGAHWPTR(pScrn);
+#endif
    ASTRecPtr pAST = ASTPTR(pScrn);
 
    if (pScrn->vtSema == TRUE)
@@ -1197,11 +1266,15 @@ ASTCloseScreen(int scrnIndex, ScreenPtr pScreen)
       if (pAST->jChipType == AST1180)
           ASTBlankScreen(pScrn, 0);
       
+#if (!defined(__sparc__))
       vgaHWLock(hwp);
+#endif
    }
 
    ASTUnmapMem(pScrn);
+#if (!defined(__sparc__))
    vgaHWUnmapMem(pScrn);
+#endif
 
    if(pAST->AccelInfoPtr) {
        XAADestroyInfoRec(pAST->AccelInfoPtr);
@@ -1222,12 +1295,13 @@ static void
 ASTSave(ScrnInfoPtr pScrn)
 {
    ASTRecPtr pAST;
-   vgaRegPtr vgaReg;
    ASTRegPtr astReg;   
    int i, icount=0;
    ULONG ulData;
 
    pAST = ASTPTR(pScrn);
+#if !defined(__sparc__)
+   vgaRegPtr vgaReg;
    vgaReg = &VGAHWPTR(pScrn)->SavedReg;
    astReg = &pAST->SavedReg;
     
@@ -1238,6 +1312,10 @@ ASTSave(ScrnInfoPtr pScrn)
    else {
        vgaHWSave(pScrn, vgaReg, VGA_SR_MODE);
    }
+#else
+   astReg = &pAST->SavedReg;
+   ASTSaveHW(pScrn);
+#endif
    
    /* Ext. Save */
    if (pAST->jChipType == AST1180)
@@ -1266,12 +1344,13 @@ static void
 ASTRestore(ScrnInfoPtr pScrn)
 {
    ASTRecPtr pAST;
-   vgaRegPtr vgaReg;
    ASTRegPtr astReg;   
    int i, icount=0;
    ULONG ulData;
 
    pAST = ASTPTR(pScrn);
+#if !defined(__sparc__)
+   vgaRegPtr vgaReg;
    vgaReg = &VGAHWPTR(pScrn)->SavedReg;
    astReg = &pAST->SavedReg;
     
@@ -1303,18 +1382,21 @@ ASTRestore(ScrnInfoPtr pScrn)
           SetIndexReg(CRTC_PORT, (UCHAR) (i), astReg->ExtCRTC[icount++]);
       SetIndexReg(CRTC_PORT, (UCHAR) (0xBB), astReg->ExtCRTC[icount]);
    }
-
+#endif /* __sparc__ */
 }
 
 static void
 ASTProbeDDC(ScrnInfoPtr pScrn, int index)
 {
-   vbeInfoPtr pVbe;	
    ASTRecPtr pAST = ASTPTR(pScrn);	
    unsigned char DDC_data[128];
    Bool Flags;
 
+#if defined(__sparc__)
+   if (xf86LoadSubModule(pScrn, "ddc"))
+#else
    if ( (pAST->jChipType == AST1180) || (!xf86IsPrimaryPci(pAST->PciInfo)) )
+#endif
    {
        if (pAST->jChipType == AST1180)	
            Flags = GetVGA2EDID(pScrn, DDC_data);
@@ -1328,14 +1410,16 @@ ASTProbeDDC(ScrnInfoPtr pScrn, int index)
        else
            xf86DrvMsg(pScrn->scrnIndex, X_INFO,"[ASTProbeDDC] Can't Get EDID Properly \n");               
    }   
+#if !defined(__sparc__)
    else
    {
        if (xf86LoadSubModule(pScrn, "vbe")) {
-          pVbe = VBEInit(NULL, index);
+          vbeInfoPtr pVbe = VBEInit(NULL, index);
           ConfiguredMonitor = vbeDoEDID(pVbe, NULL);
           vbeFree(pVbe);
        }
    }
+#endif
 }
 
 #define SkipDT	0x00
@@ -1345,6 +1429,7 @@ ASTProbeDDC(ScrnInfoPtr pScrn, int index)
 static xf86MonPtr
 ASTDoDDC(ScrnInfoPtr pScrn, int index)
 {
+#if !defined(__sparc__)
    vbeInfoPtr pVbe;
    xf86MonPtr MonInfo = NULL, MonInfo1 = NULL, MonInfo2 = NULL;
    ASTRecPtr pAST = ASTPTR(pScrn);
@@ -1539,6 +1624,30 @@ ASTDoDDC(ScrnInfoPtr pScrn, int index)
        }
    
    } /* AST1180 */
+#else /* __sparc__ */
+
+   xf86MonPtr MonInfo = NULL;
+   ASTRecPtr pAST = ASTPTR(pScrn);
+   unsigned char DDC_data[128];
+
+   /* Honour Option "noDDC" */
+   if (xf86ReturnOptValBool(pAST->Options, OPTION_NO_DDC, FALSE)) {
+      return MonInfo;
+   }
+
+   if ((xf86LoadSubModule(pScrn, "ddc")) && (GetVGAEDID(pScrn, DDC_data) == TRUE))
+   {
+      MonInfo = xf86InterpretEDID(pScrn->scrnIndex, DDC_data);
+
+      xf86PrintEDID(MonInfo);
+      xf86SetDDCproperties(pScrn, MonInfo);
+   }
+   else
+   {
+      xf86DrvMsg(pScrn->scrnIndex, X_INFO,"[ASTDoDDC] Can't Load DDC Sub-Modules or Read EDID Failed \n");
+   }
+
+#endif
 
    return MonInfo;
 }
@@ -1564,9 +1673,14 @@ ASTModeInit(ScrnInfoPtr pScrn, DisplayModePtr mode)
     vgaHWPtr hwp;
     ASTRecPtr pAST;
 
-    hwp = VGAHWPTR(pScrn);
     pAST = ASTPTR(pScrn);
 
+    pScrn->vtSema = TRUE;
+    pAST->ModePtr = mode;
+
+#if !defined(__sparc__)
+    hwp = VGAHWPTR(pScrn);
+
     vgaHWUnlock(hwp);
 
     if (!vgaHWInit(pScrn, mode))
@@ -1579,6 +1693,10 @@ ASTModeInit(ScrnInfoPtr pScrn, DisplayModePtr mode)
       return FALSE;
     
     vgaHWProtect(pScrn, FALSE);
+#else
+    if (!ASTSetMode(pScrn, mode))
+      return FALSE;
+#endif
 
     return TRUE;
 }
diff --git a/src/ast_mode.c b/src/ast_mode.c
index b58916f..3ea5089 100644
--- a/src/ast_mode.c
+++ b/src/ast_mode.c
@@ -798,6 +798,16 @@ void vSetExtReg(ScrnInfoPtr pScrn, DisplayModePtr mode, PVBIOS_MODE_INFO pVGAMod
     SetIndexRegMask(CRTC_PORT,0xA3, 0xF0, (UCHAR) jRegA3);                                
     SetIndexRegMask(CRTC_PORT,0xA8, 0xFD, (UCHAR) jRegA8);                                
 
+#if defined(__sparc__)
+    UCHAR jRegA2 = 0x00;
+
+    if ((pScrn->bitsPerPixel == 15) || (pScrn->bitsPerPixel == 16) )
+        jRegA2 |= 0xC0;
+    else if  (pScrn->bitsPerPixel == 32)
+        jRegA2 |= 0x80;
+    SetIndexRegMask(CRTC_PORT,0xA2, 0x3F, (UCHAR) jRegA2);
+#endif
+
     /* Set Threshold */
     if (pAST->jChipType == AST2300)
     {
diff --git a/src/ast_tool.c b/src/ast_tool.c
index 1dd87f0..7d9ed0d 100644
--- a/src/ast_tool.c
+++ b/src/ast_tool.c
@@ -60,16 +60,29 @@ Bool ASTUnmapMem(ScrnInfoPtr pScrn);
 Bool ASTMapMMIO(ScrnInfoPtr pScrn);
 void ASTUnmapMMIO(ScrnInfoPtr pScrn);
 
+#if defined(__sparc__)
+extern pointer ASTMapVidMem(ScrnInfoPtr, unsigned int, PCITAG,
+                                 unsigned long, unsigned long);
+extern void    ASTUnmapVidMem(ScrnInfoPtr, pointer, unsigned long);
+#endif /* __sparc__ */
+
+
 Bool
 ASTMapMem(ScrnInfoPtr pScrn)
 {
    ASTRecPtr pAST = ASTPTR(pScrn);
 
-#ifndef XSERVER_LIBPCIACCESS
+#if !defined(XSERVER_LIBPCIACCESS) || defined(__sparc__)
+#if !defined(__sparc__)
    pAST->FBVirtualAddr = xf86MapPciMem(pScrn->scrnIndex, VIDMEM_FRAMEBUFFER,
 				 pAST->PciTag,
 				 pAST->FBPhysAddr, pAST->FbMapSize);
 #else
+   pAST->FBVirtualAddr = ASTMapVidMem(pScrn, VIDMEM_FRAMEBUFFER, NULL,
+                                pAST->FBPhysAddr, pAST->FbMapSize);
+#endif /* sparc */
+
+#else
    {
      void** result = (void**)&pAST->FBVirtualAddr;
      int err = pci_device_map_range(pAST->PciInfo,
@@ -95,10 +108,14 @@ ASTUnmapMem(ScrnInfoPtr pScrn)
 {
    ASTRecPtr pAST = ASTPTR(pScrn);
 
-#ifndef XSERVER_LIBPCIACCESS 
+#if !defined(XSERVER_LIBPCIACCESS) || defined(__sparc__) 
+#if !defined(__sparc__)
    xf86UnMapVidMem(pScrn->scrnIndex, (pointer) pAST->FBVirtualAddr,
 		   pAST->FbMapSize);
 #else
+   ASTUnmapVidMem(pScrn, (pointer)pAST->FBVirtualAddr, pAST->FbMapSize);
+#endif
+#else
    pci_device_unmap_range(pAST->PciInfo, pAST->FBVirtualAddr, pAST->FbMapSize);
 #endif
 		   
@@ -111,7 +128,7 @@ Bool
 ASTMapMMIO(ScrnInfoPtr pScrn)
 {
    ASTRecPtr pAST = ASTPTR(pScrn);
-#ifndef XSERVER_LIBPCIACCESS
+#if !defined(XSERVER_LIBPCIACCESS) || defined(__sparc__)
    int mmioFlags;
 
 #if !defined(__alpha__)
@@ -121,9 +138,15 @@ ASTMapMMIO(ScrnInfoPtr pScrn)
 #endif
 
 
+#if !defined(__sparc__)
    pAST->MMIOVirtualAddr = xf86MapPciMem(pScrn->scrnIndex, mmioFlags,
 				         pAST->PciTag,
 				         pAST->MMIOPhysAddr, pAST->MMIOMapSize);
+#else
+   pAST->MMIOVirtualAddr = ASTMapVidMem(pScrn,
+                        VIDMEM_MMIO | VIDMEM_READSIDEEFFECT, NULL,
+                        pAST->MMIOPhysAddr, pAST->MMIOMapSize);
+#endif
 
 #else
    {
@@ -150,10 +173,14 @@ ASTUnmapMMIO(ScrnInfoPtr pScrn)
 {
    ASTRecPtr pAST = ASTPTR(pScrn);
 
-#ifndef XSERVER_LIBPCIACCESS
+#if !defined(XSERVER_LIBPCIACCESS) || defined(__sparc__)
+#if !defined(__sparc__)
    xf86UnMapVidMem(pScrn->scrnIndex, (pointer) pAST->MMIOVirtualAddr,
 		   pAST->MMIOMapSize);
 #else
+   ASTUnmapVidMem(pScrn, (pointer)pAST->MMIOVirtualAddr, pAST->MMIOMapSize);
+#endif
+#else
    pci_device_unmap_range(pAST->PciInfo, pAST->MMIOVirtualAddr, pAST->MMIOMapSize);
 #endif
    pAST->MMIOVirtualAddr = 0;
diff --git a/src/ast_vgatool.c b/src/ast_vgatool.c
index 4a90dd4..fa0722c 100644
--- a/src/ast_vgatool.c
+++ b/src/ast_vgatool.c
@@ -95,6 +95,27 @@ bASTRegInit(ScrnInfoPtr pScrn)
    /* Enable MMIO */
    SetIndexRegMask(CRTC_PORT,0xA1, 0xFF, 0x04);
 
+   /* Enable Big-Endian */
+#if	defined(__sparc__)
+   UCHAR       jReg = 0x00;
+
+   switch (pScrn->bitsPerPixel)   
+   {
+   case 8:
+       jReg = 0x00;
+       break;
+   case 15:
+   case 16:
+       jReg = 0xC0;
+       break;
+   case 24:
+   case 32:
+       jReg = 0x80;
+       break;       	
+   }
+   SetIndexRegMask(CRTC_PORT,0xA2, 0x3F, jReg);
+#endif
+
    return (TRUE);
    	
 }
@@ -445,6 +466,7 @@ vASTLoadPalette(ScrnInfoPtr pScrn, int numColors, int *indices, LOCO *colors,
 void
 ASTDisplayPowerManagementSet(ScrnInfoPtr pScrn, int PowerManagementMode, int flags)
 {
+#if     !defined(__sparc__)
    ASTRecPtr pAST;
    UCHAR SEQ01, CRB6;
    ULONG ulData, ulTemp;
@@ -494,6 +516,7 @@ ASTDisplayPowerManagementSet(ScrnInfoPtr pScrn, int PowerManagementMode, int fla
        SetIndexRegMask(SEQ_PORT,0x01, 0xDF, SEQ01);
        SetIndexRegMask(CRTC_PORT,0xB6, 0xFC, CRB6);
    }    
+#endif
 
 }
 
@@ -985,7 +1008,7 @@ AST_DRAMStruct AST1100DRAMTableData[] = {
     { 0x0030, 0x00000040 },
     { 0x0028, 0x00000003 },
     { 0x000C, 0x00005a21 },
-    { 0x0034, 0x00007c03 },
+    { 0x0034, 0x00007c43 },
     { 0x0120, 0x00004c41 },
     { 0xffff, 0xffffffff },
 };
@@ -1038,7 +1061,7 @@ AST_DRAMStruct AST2100DRAMTableData[] = {
     { 0x0030, 0x00000040 },
     { 0x0028, 0x00000003 },
     { 0x000C, 0x00005a21 },
-    { 0x0034, 0x00007c03 },
+    { 0x0034, 0x00007c43 },
     { 0x0120, 0x00005061 },
     { 0xffff, 0xffffffff },
 };
@@ -2654,9 +2677,11 @@ Bool InitVGA(ScrnInfoPtr pScrn, ULONG Flags)
 
    {
        /* Enable PCI */
+#if    !defined(__sparc__)
        PCI_READ_LONG(pAST->PciInfo, &ulData, 0x04);
        ulData |= 0x03;
        PCI_WRITE_LONG(pAST->PciInfo, ulData, 0x04);       
+#endif
 
        /* Enable VGA */
        vEnableVGA(pScrn);
diff --git a/src/ast_vgatool.h b/src/ast_vgatool.h
index 53cb4c7..9f5fa50 100644
--- a/src/ast_vgatool.h
+++ b/src/ast_vgatool.h
@@ -20,6 +20,12 @@
  * PERFORMANCE OF THIS SOFTWARE.
  */
 
+#ifndef ASTVGATOOL_H
+#define ASTVGATOOL_H
+
+#include <unistd.h>
+#include <stropts.h>
+
 /* VRAM Size Definition */
 #define VIDEOMEM_SIZE_08M	0x00800000
 #define VIDEOMEM_SIZE_16M	0x01000000
@@ -40,6 +46,95 @@
 #define DRAMTYPE_2Gx16		6
 #define DRAMTYPE_4Gx16		7
 
+#if defined(__sparc__)
+
+#define SET_IO_REG		0x1000
+#define GET_IO_REG		0x1001
+
+#define AR_PORT_WRITE       	0x40
+#define MISC_PORT_WRITE     	0x42
+#define SEQ_PORT    		0x44
+#define DAC_INDEX_READ          0x47
+#define DAC_INDEX_WRITE     	0x48
+#define DAC_DATA        	0x49
+#define GR_PORT         	0x4E
+#define CRTC_PORT       	0x54
+#define INPUT_STATUS1_READ  	0x5A
+#define MISC_PORT_READ      	0x4C
+
+static inline uchar_t 
+_GetRegFromFd(uchar_t off, int fd)
+{
+	struct vis_io_reg   io_reg = {
+	       .offset = off
+	};
+	ioctl(fd, VIS_GETIOREG, &io_reg);
+	return io_reg.value;
+}
+
+#define GetReg(off)		_GetRegFromFd(off, pAST->fd)
+
+#define SetReg(off, val)	do {					\
+			struct vis_io_reg   io_reg = {			\
+			       .offset = off,				\
+			       .value = val				\
+			};     	       	 				\
+			ioctl(pAST->fd, VIS_SETIOREG, &io_reg);		\
+			} while (0)
+
+#define GetIndexReg(off, index, val)	do {				\
+			struct vis_io_reg   io_reg = {			\
+			       .offset = off,				\
+			       .value = index				\
+			};     	       	 				\
+			ioctl(pAST->fd, VIS_SETIOREG, &io_reg);		\
+			io_reg.offset = off+1;				\
+			ioctl(pAST->fd, VIS_GETIOREG, &io_reg);		\
+			val = io_reg.value;				\
+			} while (0)
+
+#define SetIndexReg(off, index, val) do {				\
+			struct vis_io_reg   io_reg = {			\
+			       .offset = off,				\
+			       .value = index				\
+			};     	       	 				\
+			ioctl(pAST->fd, VIS_SETIOREG, &io_reg);		\
+			io_reg.offset = off+1; 	      			\
+			io_reg.value = val;				\
+			ioctl(pAST->fd, VIS_SETIOREG, &io_reg);		\
+			} while (0)
+
+#define GetIndexRegMask(off, index, and, val) do {  			\
+			struct vis_io_reg   io_reg = {			\
+			       .offset = off,				\
+			       .value = index				\
+			};     	       	 				\
+			ioctl(pAST->fd, VIS_SETIOREG, &io_reg);		\
+			io_reg.offset = off+1;				\
+			ioctl(pAST->fd, VIS_GETIOREG, &io_reg);		\
+			val = io_reg.value & and;			\
+			} while (0)
+
+#define SetIndexRegMask(off, index, and, val) do { 			\
+			UCHAR __Temp; 					\
+			struct vis_io_reg   io_reg = {			\
+			       .offset = off,				\
+			       .value = index				\
+			};     	       	 				\
+			ioctl(pAST->fd, VIS_SETIOREG, &io_reg);		\
+			io_reg.offset = off + 1;			\
+			ioctl(pAST->fd, VIS_GETIOREG, &io_reg);		\
+			__Temp = (io_reg.value & and) | val;      	\
+			io_reg.offset = off;				\
+			io_reg.value = index;				\
+			ioctl(pAST->fd, VIS_SETIOREG, &io_reg);		\
+			io_reg.offset = off+1;	      			\
+			io_reg.value = __Temp;				\
+			ioctl(pAST->fd, VIS_SETIOREG, &io_reg);		\
+			} while (0)
+
+#else /* !__sparc__ */
+
 #define AR_PORT_WRITE		(pAST->RelocateIO + 0x40)
 #define MISC_PORT_WRITE		(pAST->RelocateIO + 0x42)
 #define SEQ_PORT 		(pAST->RelocateIO + 0x44)
@@ -71,6 +166,8 @@
                       				SetIndexReg(base,index,__Temp); 	\
                     				} while (0)
 
+#endif /* __sparc__ */
+
 #define VGA_GET_PALETTE_INDEX(index, red, green, blue) \
 { \
    UCHAR __junk;				\
@@ -162,3 +259,5 @@
         *(ULONG *) (pAST->MMIOVirtualAddr + 0xF000) = 0x1;	\
         *(ULONG *) (pAST->MMIOVirtualAddr + 0x10000 + ((addr) & 0x0000FFFF)) = (data);	\
 }
+
+#endif /* ASTVGATOOL_H */
--- a/src/ast_vgatool.c	Wed Mar 28 14:37:44 2012
+++ b/src/ast_vgatool.c	Wed Mar 28 14:39:46 2012
@@ -2974,9 +2974,11 @@
     pAST = ASTPTR(pScrn);    
 
     /* Enable PCI */
+#if    !defined(__sparc__)
     PCI_READ_LONG(pAST->PciInfo, &ulData, 0x04);
     ulData |= 0x03;
     PCI_WRITE_LONG(pAST->PciInfo, ulData, 0x04);       
+#endif
     	
     /* init DRAM if no F/W */
     /* TODO */
