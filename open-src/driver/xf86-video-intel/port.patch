--- configure.ac	Mon Nov  9 14:13:01 2009
+++ configure.ac	Mon Nov  9 14:14:24 2009
@@ -94,6 +94,10 @@
 # Checks for pkg-config packages
 PKG_CHECK_MODULES(XORG, [xorg-server xproto fontsproto $REQUIRED_MODULES])
 PKG_CHECK_MODULES(UXA, [xorg-server >= 1.5], [BUILD_UXA=no], [BUILD_UXA=no])
+PKG_CHECK_MODULES(XEXT, [xextproto >= 7.0.99.1],
+		HAVE_XEXTPROTO_71="yes"; AC_DEFINE(HAVE_XEXTPROTO_71, 1, [xextproto 7.1 available]),
+		HAVE_XEXTPROTO_71="no")
+AM_CONDITIONAL(HAVE_XEXTPROTO_71, [ test "$HAVE_XEXTPROTO_71" = "yes" ])
 
 AC_ARG_WITH(xorg-sdk-dir,
 	AC_HELP_STRING([--with-xorg-sdk-dir=DIR],
--- src/ch7017/ch7017.c	Mon Nov  9 14:16:05 2009
+++ src/ch7017/ch7017.c	Mon Nov  9 14:16:24 2009
@@ -34,13 +34,16 @@
 
 #include "xf86.h"
 #include "xf86_OSproc.h"
-#include "xf86Resources.h"
 #include "compiler.h"
 #include "miscstruct.h"
 #include "xf86i2c.h"
 #include "xf86Crtc.h"
+#ifdef HAVE_XEXTPROTO_71
+#include <X11/extensions/dpmsconst.h>
+#else
 #define DPMS_SERVER
 #include <X11/extensions/dpms.h>
+#endif
 
 #include "../i2c_vid.h"
 #include "ch7017_reg.h"
--- src/ch7xxx/ch7xxx.c	Mon Nov  9 14:17:05 2009
+++ src/ch7xxx/ch7xxx.c	Mon Nov  9 14:17:18 2009
@@ -34,13 +34,16 @@
 #include <string.h>
 #include "xf86.h"
 #include "xf86_OSproc.h"
-#include "xf86Resources.h"
 #include "compiler.h"
 #include "miscstruct.h"
 #include "xf86i2c.h"
 #include "xf86Crtc.h"
+#ifdef HAVE_XEXTPROTO_71
+#include <X11/extensions/dpmsconst.h>
+#else
 #define DPMS_SERVER
 #include <X11/extensions/dpms.h>
+#endif
 
 #include "../i2c_vid.h"
 #include "ch7xxx.h"
--- src/ivch/ivch.c	Mon Nov  9 14:17:41 2009
+++ src/ivch/ivch.c	Mon Nov  9 14:17:59 2009
@@ -31,13 +31,16 @@
 
 #include "xf86.h"
 #include "xf86_OSproc.h"
-#include "xf86Resources.h"
 #include "compiler.h"
 #include "miscstruct.h"
 #include "xf86i2c.h"
 #include "xf86Crtc.h"
+#ifdef HAVE_XEXTPROTO_71
+#include <X11/extensions/dpmsconst.h>
+#else
 #define DPMS_SERVER
 #include <X11/extensions/dpms.h>
+#endif
 #include <unistd.h>
 
 #include "../i2c_vid.h"
--- src/sil164/sil164.c	Mon Nov  9 14:21:15 2009
+++ src/sil164/sil164.c	Mon Nov  9 14:21:30 2009
@@ -35,13 +35,16 @@
 
 #include "xf86.h"
 #include "xf86_OSproc.h"
-#include "xf86Resources.h"
 #include "compiler.h"
 #include "miscstruct.h"
 #include "xf86i2c.h"
 #include "xf86Crtc.h"
+#ifdef HAVE_XEXTPROTO_71
+#include <X11/extensions/dpmsconst.h>
+#else
 #define DPMS_SERVER
 #include <X11/extensions/dpms.h>
+#endif
 
 #include "../i2c_vid.h"
 #include "sil164.h"
--- src/tfp410/tfp410.c	Mon Nov  9 14:22:25 2009
+++ src/tfp410/tfp410.c	Mon Nov  9 14:22:37 2009
@@ -34,13 +34,16 @@
 
 #include "xf86.h"
 #include "xf86_OSproc.h"
-#include "xf86Resources.h"
 #include "compiler.h"
 #include "miscstruct.h"
 #include "xf86i2c.h"
 #include "xf86Crtc.h"
+#ifdef HAVE_XEXTPROTO_71
+#include <X11/extensions/dpmsconst.h>
+#else
 #define DPMS_SERVER
 #include <X11/extensions/dpms.h>
+#endif
 
 #include "../i2c_vid.h"
 #include "tfp410.h"
--- src/i810_driver.c	Mon Nov  9 14:25:59 2009
+++ src/i810_driver.c	Mon Nov  9 14:35:30 2009
@@ -69,8 +69,6 @@
  */
 #include "xf86.h"
 #include "xf86_OSproc.h"
-#include "xf86Resources.h"
-#include "xf86RAC.h"
 #include "xf86cmap.h"
 #include "compiler.h"
 #include "mibstore.h"
@@ -508,20 +506,6 @@
 		    );
 
       /*
-       * Tell the loader about symbols from other modules that this module
-       * might refer to.
-       */
-      LoaderRefSymLists(I810vgahwSymbols,
-			I810fbSymbols, I810xaaSymbols, I810ramdacSymbols,
-#ifdef XF86DRI
-			I810drmSymbols,
-			I810driSymbols,
-#endif
-			I810shadowFBSymbols,
-			I810vbeSymbols, vbeOptionalSymbols,
-			I810ddcSymbols, NULL);
-
-      /*
        * The return value must be non-NULL on success even though there
        * is no TearDownProc.
        */
@@ -894,7 +878,6 @@
    }
 
    if (xf86LoadSubModule(pScrn, "vbe") && (pVbe = VBEInit(NULL, index))) {
-      xf86LoaderReqSymLists(I810vbeSymbols, NULL);
       MonInfo = vbeDoEDID(pVbe, NULL);
       xf86PrintEDID(MonInfo);
       xf86SetDDCproperties(pScrn, MonInfo);
@@ -949,8 +932,6 @@
    if (!xf86LoadSubModule(pScrn, "vgahw"))
       return FALSE;
 
-   xf86LoaderReqSymLists(I810vgahwSymbols, NULL);
-
    /* Allocate a vgaHWRec */
    if (!vgaHWGetHWRec(pScrn))
       return FALSE;
@@ -963,10 +944,6 @@
 			  pI810->PciInfo->func);
 #endif
 
-   if (xf86RegisterResources(pI810->pEnt->index, NULL, ResNone))
-      return FALSE;
-   pScrn->racMemFlags = RAC_FB | RAC_COLORMAP;
-
    /* Set pScrn->monitor */
    pScrn->monitor = pScrn->confScreen->monitor;
 
@@ -1045,7 +1022,6 @@
 	 I810FreeRec(pScrn);
 	 return FALSE;
       }
-      xf86LoaderReqSymLists(I810xaaSymbols, NULL);
    }
    
 #ifdef XF86DRI
@@ -1329,7 +1305,6 @@
       I810FreeRec(pScrn);
       return FALSE;
    }
-   xf86LoaderReqSymLists(I810fbSymbols, NULL);
 
    if (!xf86ReturnOptValBool(pI810->Options, OPTION_SW_CURSOR, FALSE)) {
       if (!xf86LoadSubModule(pScrn, "ramdac")) {
@@ -1336,7 +1311,6 @@
 	 I810FreeRec(pScrn);
 	 return FALSE;
       }
-      xf86LoaderReqSymLists(I810ramdacSymbols, NULL);
    }
 
    if (xf86GetOptValInteger
@@ -1363,9 +1337,6 @@
 	 xf86DrvMsg(pScrn->scrnIndex, X_ERROR, 
 		    "Couldn't load shadowfb module:\n");
        }
-       else {
-	 xf86LoaderReqSymLists(I810shadowFBSymbols, NULL);
-       }
      }
      
      xf86DrvMsg(pScrn->scrnIndex, X_CONFIG, "page flipping %s\n",
@@ -1397,16 +1368,12 @@
 #ifdef XF86DRI
    /* Load the dri module if requested. */
    if (xf86ReturnOptValBool(pI810->Options, OPTION_DRI, FALSE)) {
-      if (xf86LoadSubModule(pScrn, "dri")) {
-	 xf86LoaderReqSymLists(I810driSymbols, I810drmSymbols, NULL);
-      }
+	xf86LoadSubModule(pScrn, "dri");
    }
 #endif
 
    /*  We won't be using the VGA access after the probe */
    I810SetMMIOAccess(pI810);
-   xf86SetOperatingState(resVgaIo, pI810->pEnt->index, ResUnusedOpr);
-   xf86SetOperatingState(resVgaMem, pI810->pEnt->index, ResDisableOpr);
 
    return TRUE;
 }
--- src/i830_i2c.c	Mon Nov  9 14:37:26 2009
+++ src/i830_i2c.c	Mon Nov  9 14:37:38 2009
@@ -31,8 +31,6 @@
 
 #include "xf86.h"
 #include "xf86_OSproc.h"
-#include "xf86Resources.h"
-#include "xf86RAC.h"
 #include "xf86cmap.h"
 #include "compiler.h"
 #include "mibstore.h"
--- src/i810_hwmc.c	Mon Nov  9 14:37:11 2009
+++ src/i810_hwmc.c	Mon Nov  9 14:38:51 2009
@@ -42,7 +42,6 @@
 
 #include "xf86.h"
 #include "xf86_OSproc.h"
-#include "xf86Resources.h"
 #include "compiler.h"
 #include "xf86PciInfo.h"
 #include "xf86Pci.h"
--- src/i810_video.c	Mon Nov  9 14:37:11 2009
+++ src/i810_video.c	Mon Nov  9 14:39:40 2009
@@ -42,7 +42,6 @@
 
 #include "xf86.h"
 #include "xf86_OSproc.h"
-#include "xf86Resources.h"
 #include "compiler.h"
 #include "xf86PciInfo.h"
 #include "xf86Pci.h"
--- src/i830_video.c	Mon Nov  9 14:37:11 2009
+++ src/i830_video.c	Mon Nov  9 14:40:15 2009
@@ -57,7 +57,6 @@
 
 #include "xf86.h"
 #include "xf86_OSproc.h"
-#include "xf86Resources.h"
 #include "compiler.h"
 #include "xf86PciInfo.h"
 #include "xf86Pci.h"
--- src/i915_hwmc.c	Mon Nov  9 14:37:11 2009
+++ src/i915_hwmc.c	Mon Nov  9 14:40:35 2009
@@ -32,7 +32,6 @@
 
 #include "xf86.h"
 #include "xf86_OSproc.h"
-#include "xf86Resources.h"
 #include "compiler.h"
 #include "xf86PciInfo.h"
 #include "xf86Pci.h"
--- src/i830_driver.c	Mon Nov  9 14:37:26 2009
+++ src/i830_driver.c	Mon Nov  9 14:49:38 2009
@@ -175,8 +175,6 @@
 
 #include "xf86.h"
 #include "xf86_OSproc.h"
-#include "xf86Resources.h"
-#include "xf86RAC.h"
 #include "xf86Priv.h"
 #include "xf86cmap.h"
 #include "compiler.h"
@@ -1109,7 +1107,6 @@
    if (!xf86LoadSubModule(pScrn, "ddc")) {
       pI830->ddc2 = FALSE;
    } else {
-      xf86LoaderReqSymLists(I810ddcSymbols, NULL);
       pI830->ddc2 = TRUE;
    }
 
@@ -1117,8 +1114,6 @@
    /* Load I2C if we have the code to use it */
    if (pI830->ddc2) {
       if (xf86LoadSubModule(pScrn, "i2c")) {
-	 xf86LoaderReqSymLists(I810i2cSymbols, NULL);
-
 	 pI830->ddc2 = TRUE;
       } else {
 	 pI830->ddc2 = FALSE;
@@ -1313,9 +1308,6 @@
     pEnt = xf86GetEntityInfo(pScrn->entityList[0]);
     PciInfo = xf86GetPciInfoForEntity(pEnt->index);
 
-    if (!xf86LoaderCheckSymbol("DRICreatePCIBusID"))
-	return FALSE;
-
     busIdString = DRICreatePCIBusID(PciInfo);
 
     ret = drmCheckModesettingSupported(busIdString);
@@ -1595,7 +1587,6 @@
     /* The vgahw module should be loaded here when needed */
     if (!xf86LoadSubModule(pScrn, "vgahw"))
 	return FALSE;
-    xf86LoaderReqSymLists(I810vgahwSymbols, NULL);
 
     return TRUE;
 }
@@ -1996,11 +1987,6 @@
     } else
         pI830->entityPrivate = NULL;
 
-   if (xf86RegisterResources(pI830->pEnt->index, NULL, ResNone)) {
-      PreInitCleanup(pScrn);
-      return FALSE;
-   }
-
    if (xf86IsEntityShared(pScrn->entityList[0])) {
       if (xf86IsPrimInitDone(pScrn->entityList[0])) {
 	 pI830->init = 1;
@@ -2025,7 +2011,6 @@
       }
    }
 
-   pScrn->racMemFlags = RAC_FB | RAC_COLORMAP;
    pScrn->monitor = pScrn->confScreen->monitor;
    pScrn->progClock = TRUE;
    pScrn->rgbBits = 8;
@@ -2128,8 +2113,6 @@
       return FALSE;
    }
 
-   xf86LoaderReqSymLists(I810fbSymbols, NULL);
-
    switch (pI830->accel) {
 #ifdef I830_USE_XAA
    case ACCEL_XAA:
@@ -2137,7 +2120,6 @@
 	 PreInitCleanup(pScrn);
 	 return FALSE;
       }
-      xf86LoaderReqSymLists(I810xaaSymbols, NULL);
       break;
 #endif
 
@@ -2159,7 +2141,6 @@
 	 PreInitCleanup(pScrn);
 	 return FALSE;
       }
-      xf86LoaderReqSymLists(I830exaSymbols, NULL);
       break;
    }
 #endif
@@ -2171,7 +2152,6 @@
 	 PreInitCleanup(pScrn);
 	 return FALSE;
       }
-      xf86LoaderReqSymLists(I810ramdacSymbols, NULL);
    }
 
    if (!pI830->use_drm_mode) {
@@ -2184,8 +2164,6 @@
 
        /*  We won't be using the VGA access after the probe. */
        I830SetMMIOAccess(pI830);
-       xf86SetOperatingState(resVgaIo, pI830->pEnt->index, ResUnusedOpr);
-       xf86SetOperatingState(resVgaMem, pI830->pEnt->index, ResDisableOpr);
    }
 
 #if defined(XF86DRI)
@@ -2192,9 +2170,7 @@
    /* Load the dri module if requested. */
    if (xf86ReturnOptValBool(pI830->Options, OPTION_DRI, FALSE) &&
        pI830->directRenderingType != DRI_DISABLED) {
-      if (xf86LoadSubModule(pScrn, "dri")) {
-	 xf86LoaderReqSymLists(I810driSymbols, I810drmSymbols, NULL);
-      }
+       xf86LoadSubModule(pScrn, "dri");
    }
 #endif
 
--- src/i830.h	Mon Nov  9 15:11:00 2009
+++ src/i830.h	Mon Nov  9 15:11:41 2009
@@ -1196,4 +1196,24 @@
     INTEL_CREATE_PIXMAP_TILING_Y,
 };
 
+static inline PixmapPtr
+get_drawable_pixmap(DrawablePtr drawable)
+{
+    ScreenPtr screen = drawable->pScreen;
+
+    if (drawable->type == DRAWABLE_PIXMAP)
+        return (PixmapPtr)drawable;
+    else
+        return screen->GetWindowPixmap((WindowPtr)drawable);
+}
+
+static inline Bool
+pixmap_is_scanout(PixmapPtr pixmap)
+{
+    ScreenPtr screen = pixmap->drawable.pScreen;
+
+    return pixmap == screen->GetScreenPixmap(screen);
+}
+
+
 #endif /* _I830_H_ */
--- src/i830_dri.c	Mon Nov  9 14:52:21 2009
+++ src/i830_dri.c	Mon Nov  9 15:09:10 2009
@@ -92,7 +92,10 @@
 
 #ifdef DRI2
 #include "dri2.h"
+#if DRI2INFOREC_VERSION >= 1
+#define USE_DRI2_1_1_0
 #endif
+#endif
 
 static Bool I830InitVisualConfigs(ScreenPtr pScreen);
 static Bool I830CreateContext(ScreenPtr pScreen, VisualPtr visual,
@@ -1827,8 +1830,10 @@
 
 typedef struct {
     PixmapPtr pPixmap;
+    unsigned int attachment;
 } I830DRI2BufferPrivateRec, *I830DRI2BufferPrivatePtr;
 
+#ifndef USE_DRI2_1_1_0
 static DRI2BufferPtr
 I830DRI2CreateBuffers(DrawablePtr pDraw, unsigned int *attachments, int count)
 {
@@ -1911,6 +1916,83 @@
     return buffers;
 }
 
+#else
+
+static DRI2Buffer2Ptr
+I830DRI2CreateBuffer(DrawablePtr pDraw, unsigned int attachment,
+                     unsigned int format)
+{
+    ScreenPtr pScreen = pDraw->pScreen;
+    ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
+    I830Ptr pI830 = I830PTR(pScrn);
+    DRI2Buffer2Ptr buffer;
+    dri_bo *bo;
+    I830DRI2BufferPrivatePtr privates;
+    PixmapPtr pPixmap;
+
+    buffer = xcalloc(1, sizeof *buffer);
+    if (buffer == NULL)
+        return NULL;
+    privates = xcalloc(1, sizeof *privates);
+    if (privates == NULL) {
+        xfree(buffer);
+        return NULL;
+    }
+
+    if (attachment == DRI2BufferFrontLeft) {
+        pPixmap = get_drawable_pixmap(pDraw);
+        pPixmap->refcnt++;
+    } else {
+        unsigned int hint = 0;
+
+        switch (attachment) {
+        case DRI2BufferDepth:
+        case DRI2BufferDepthStencil:
+            if (SUPPORTS_YTILING(pI830))
+                hint = INTEL_CREATE_PIXMAP_TILING_Y;
+            else
+                hint = INTEL_CREATE_PIXMAP_TILING_X;
+            break;
+        case DRI2BufferFakeFrontLeft:
+        case DRI2BufferFakeFrontRight:
+        case DRI2BufferBackLeft:
+        case DRI2BufferBackRight:
+            hint = INTEL_CREATE_PIXMAP_TILING_X;
+            break;
+        }
+
+        if (!pI830->tiling ||
+            (!IS_I965G(pI830) && !pI830->kernel_exec_fencing))
+            hint = 0;
+
+        pPixmap = (*pScreen->CreatePixmap)(pScreen,
+                                           pDraw->width,
+                                           pDraw->height,
+                                           (format != 0)?format:pDraw->depth,
+                                           hint);
+
+    }
+    buffer->attachment = attachment;
+    buffer->pitch = pPixmap->devKind;
+    buffer->cpp = pPixmap->drawable.bitsPerPixel / 8;
+    buffer->driverPrivate = privates;
+    buffer->format = format;
+    buffer->flags = 0; /* not tiled */
+    privates->pPixmap = pPixmap;
+    privates->attachment = attachment;
+
+    bo = i830_get_pixmap_bo (pPixmap);
+    if (dri_bo_flink(bo, &buffer->name) != 0) {
+        /* failed to name buffer */
+    }
+
+    return buffer;
+}
+
+#endif
+
+#ifndef USE_DRI2_1_1_0
+
 static void
 I830DRI2DestroyBuffers(DrawablePtr pDraw, DRI2BufferPtr buffers, int count)
 {
@@ -1930,8 +2012,26 @@
 	xfree(buffers);
     }
 }
+#else
 
 static void
+I830DRI2DestroyBuffer(DrawablePtr pDraw, DRI2Buffer2Ptr buffer)
+{
+    if (buffer) {
+        I830DRI2BufferPrivatePtr private = buffer->driverPrivate;
+        ScreenPtr pScreen = pDraw->pScreen;
+
+        (*pScreen->DestroyPixmap)(private->pPixmap);
+
+        xfree(private);
+        xfree(buffer);
+    }
+}
+
+#endif
+
+
+static void
 I830DRI2CopyRegion(DrawablePtr pDraw, RegionPtr pRegion,
 		   DRI2BufferPtr pDestBuffer, DRI2BufferPtr pSrcBuffer)
 {
@@ -1977,6 +2077,23 @@
     char *p, *busId, buf[64];
     int fd, i, cmp;
 
+#ifdef USE_DRI2_1_1_0
+    int dri2_major = 1;
+    int dri2_minor = 0;
+#endif
+
+#ifdef USE_DRI2_1_1_0
+    if (xf86LoaderCheckSymbol("DRI2Version")) {
+        DRI2Version(& dri2_major, & dri2_minor);
+    }
+
+    if (dri2_minor < 1) {
+        xf86DrvMsg(pScrn->scrnIndex, X_WARNING,
+                   "DRI2 requires DRI2 module version 1.1.0 or later\n");
+        return FALSE;
+    }
+#endif
+
     if (pI830->accel != ACCEL_UXA) {
 	xf86DrvMsg(pScrn->scrnIndex, X_WARNING, "DRI2 requires UXA\n");
 	return FALSE;
@@ -2034,10 +2151,25 @@
 
     info.driverName = IS_I965G(pI830) ? "i965" : "i915";
     info.deviceName = p;
-    info.version = 1;
 
+#if DRI2INFOREC_VERSION >= 3
+    info.version = 3;
+    info.CreateBuffer = I830DRI2CreateBuffer;
+    info.DestroyBuffer = I830DRI2DestroyBuffer;
+#else
+# ifdef USE_DRI2_1_1_0
+    info.version = 2;
+    info.CreateBuffers = NULL;
+    info.DestroyBuffers = NULL;
+    info.CreateBuffer = I830DRI2CreateBuffer;
+    info.DestroyBuffer = I830DRI2DestroyBuffer;
+# else
+    info.version = 1;
     info.CreateBuffers = I830DRI2CreateBuffers;
     info.DestroyBuffers = I830DRI2DestroyBuffers;
+# endif
+#endif
+
     info.CopyRegion = I830DRI2CopyRegion;
 
     pI830->drmSubFD = info.fd;
--- src/i830_dvo.c	Mon Nov  9 15:12:19 2009
+++ src/i830_dvo.c	Mon Nov  9 15:12:31 2009
@@ -447,8 +447,6 @@
 	if (drv->modhandle == NULL)
 	    continue;
 
-	xf86LoaderReqSymLists(drv->symbols, NULL);
-
 	ret_ptr = NULL;
 	drv->vid_rec = LoaderSymbol(drv->fntablename);
 
