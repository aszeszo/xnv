--- include/dpi.h	1969-12-31 16:00:00.000000000 -0800
+++ include/dpi.h.new	2008-09-24 09:56:39.448121000 -0700
@@ -0,0 +1,95 @@
+/*
+ * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
+ * Use is subject to license terms.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, and/or sell copies of the Software, and to permit persons
+ * to whom the Software is furnished to do so, provided that the above
+ * copyright notice(s) and this permission notice appear in all copies of
+ * the Software and that both the above copyright notice(s) and this
+ * permission notice appear in supporting documentation.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
+ * OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
+ * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
+ * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
+ * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
+ * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ * Except as contained in this notice, the name of a copyright holder
+ * shall not be used in advertising or otherwise to promote the sale, use
+ * or other dealings in this Software without prior written authorization
+ * of the copyright holder.
+ */
+/* $XConsortium: dpi.h /main/9 1995/09/22 10:23:04 dpw $ */
+/***********************************************************
+
+Copyright (c) 1987  X Consortium
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
+X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
+AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+Except as contained in this notice, the name of the X Consortium shall not be
+used in advertising or otherwise to promote the sale, use or other dealings
+in this Software without prior written authorization from the X Consortium.
+
+
+Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.
+
+                        All Rights Reserved
+
+Permission to use, copy, modify, and distribute this software and its
+documentation for any purpose and without fee is hereby granted,
+provided that the above copyright notice appear in all copies and that
+both that copyright notice and this permission notice appear in
+supporting documentation, and that the name of Digital not be
+used in advertising or publicity pertaining to distribution of the
+software without specific, written prior permission.
+
+DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
+ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
+DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
+ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
+WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
+ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
+SOFTWARE.
+
+******************************************************************/
+#ifndef DPI_H
+#define DPI_H
+
+extern Bool XpClientDPIAdd(XpContextPtr, int, int);
+
+extern Bool XpClientDPIGetData(XpContextPtr, int *, float *);
+
+extern Bool XpClientDPIFindData(int, int *, float *);
+
+extern XpClientDPIPtr XpClientDPIGetRec(XpContextPtr);
+
+extern XpClientDPIPtr XpClientDPIFindRec(int);
+
+extern Bool XpClientDPISet(XpContextPtr, int);
+
+extern FontPtr XpClientDPIGrabFont(XpClientDPIPtr, FontPtr);
+
+#endif
--- hw/xprint/Makefile.am	2008-11-05 08:52:17.000000000 -0800
+++ hw/xprint/Makefile.am.new	2008-12-17 15:41:36.283630000 -0800
@@ -5,7 +5,7 @@ bin_PROGRAMS = Xprt
 Xprt_CFLAGS = @DIX_CFLAGS@ @XPRINT_CFLAGS@ \
 	-DPRINT_ONLY_SERVER -D_XP_PRINT_SERVER_  \
 	-DXPRINTDIR=\"$(libdir)/X11/xserver\"    \
-	-DXPRASTERDDX -DXPPCLDDX -DXPMONOPCLDDX -DXPPSDDX \
+	-DXPRASTERDDX -DXPPCLDDX -DXPPSDDX \
 	-DXFree86Server
 
 Xprt_LDFLAGS = -L$(top_srcdir)
diff -urp -x '*~' -x '*.orig' dix/dispatch.c dix/dispatch.c
--- dix/dispatch.c	2008-10-17 15:51:32.379041000 -0700
+++ dix/dispatch.c	2008-10-17 15:51:50.036961000 -0700
@@ -1,3 +1,33 @@
+/*
+ * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
+ * Use is subject to license terms.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, and/or sell copies of the Software, and to permit persons
+ * to whom the Software is furnished to do so, provided that the above
+ * copyright notice(s) and this permission notice appear in all copies of
+ * the Software and that both the above copyright notice(s) and this
+ * permission notice appear in supporting documentation.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
+ * OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
+ * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
+ * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
+ * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
+ * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ * Except as contained in this notice, the name of a copyright holder
+ * shall not be used in advertising or otherwise to promote the sale, use
+ * or other dealings in this Software without prior written authorization
+ * of the copyright holder.
+ */
+
 /************************************************************
 
 Copyright 1987, 1989, 1998  The Open Group
@@ -3391,6 +3421,21 @@ InitProcVectors(void)
     
 }
 
+/*
+ * BUG: 4402782: This code is called by Xext/xprint (XpExtensionInit) to
+ * change the X_OpenFont to ProcXpOpenFont and SProcOpenFont. This allows
+ * apps using scaling to load two fonts.
+ */
+_X_HIDDEN void
+ChangeProcVector(int vector, int (* proc)(), int (* sproc)())
+{
+    if (vector >= 0 && vector < 256 && proc && sproc)
+    {
+	ProcVector[vector] = proc;
+	SwappedProcVector[vector] = sproc;
+    }
+} /* BUG 4402782: */
+
 /**********************
  * CloseDownClient
  *
diff -urp -x '*~' -x '*.orig' dix/dixfonts.c dix/dixfonts.c
--- dix/dixfonts.c	2008-10-10 11:12:48.000000000 -0700
+++ dix/dixfonts.c	2008-10-17 15:51:50.038909000 -0700
@@ -1,3 +1,32 @@
+/*
+ * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
+ * Use is subject to license terms.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, and/or sell copies of the Software, and to permit persons
+ * to whom the Software is furnished to do so, provided that the above
+ * copyright notice(s) and this permission notice appear in all copies of
+ * the Software and that both the above copyright notice(s) and this
+ * permission notice appear in supporting documentation.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
+ * OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
+ * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
+ * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
+ * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
+ * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ * Except as contained in this notice, the name of a copyright holder
+ * shall not be used in advertising or otherwise to promote the sale, use
+ * or other dealings in this Software without prior written authorization
+ * of the copyright holder.
+ */
 /************************************************************************
 Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.
 
@@ -97,6 +126,9 @@ static int  size_slept_fpes = 0;
 static FontPathElementPtr *slept_fpes = (FontPathElementPtr *) 0;
 static FontPatternCachePtr patternCache;
 
+static void (*XpSetFont)(register ClientPtr client,
+    FontPtr pFont);     /* BUG 4402782: clientDPI */
+
 _X_EXPORT int
 FontToXError(err)
     int         err;
@@ -223,6 +255,20 @@ FreeFPE (FontPathElementPtr fpe)
     }
 }
 
+/*
+ * BUG: 4402782: This function is called by Xext/xprint.c (ProcXpOpenFont) to set
+ * the callback for opening a font with a scale factor. This can be done this way
+ * (IE static local variable) because it is turned on and off in the same server
+ * call, so no other job could inadvertently get the wrong value. We do not need
+ * to have this information dependent on the clientID
+ */
+_X_HIDDEN void
+SetXpFontFunc(void (*func)())
+{
+    XpSetFont = func;
+}       /* BUG: 4402782 */
+
+
 static Bool
 doOpenFont(ClientPtr client, OFclosurePtr c)
 {
@@ -358,6 +404,15 @@ doOpenFont(ClientPtr client, OFclosurePt
     if (patternCache && pfont != c->non_cachable_font)
 	CacheFontPattern(patternCache, c->origFontName, c->origFontNameLen,
 			 pfont);
+    /*
+     * BUG: 4402782: Store the font pointer in the data struct. This is OK since
+     * it is only set in xprint.c (ProcXpOpenFont) and turned off immediately
+     * after as a single processing line. This means that no other print jobs
+     * could use the wrong value.
+     */
+    if (XpSetFont)
+        (* XpSetFont)(client, pfont);
+
 bail:
     if (err != Successful && c->client != serverClient) {
 	SendErrorToClient(c->client, X_OpenFont, 0,
diff -urp -x '*~' -x '*.orig' Xext/xprint.c Xext/xprint.c
--- Xext/xprint.c	2008-10-10 11:12:48.000000000 -0700
+++ Xext/xprint.c	2008-10-17 15:51:50.089810000 -0700
@@ -1,4 +1,33 @@
 /*
+ * Copyright 2004 Sun Microsystems, Inc.  All rights reserved.
+ * Use is subject to license terms.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, and/or sell copies of the Software, and to permit persons
+ * to whom the Software is furnished to do so, provided that the above
+ * copyright notice(s) and this permission notice appear in all copies of
+ * the Software and that both the above copyright notice(s) and this
+ * permission notice appear in supporting documentation.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
+ * OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
+ * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
+ * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
+ * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
+ * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ * Except as contained in this notice, the name of a copyright holder
+ * shall not be used in advertising or otherwise to promote the sale, use
+ * or other dealings in this Software without prior written authorization
+ * of the copyright holder.
+ */
+/*
 (c) Copyright 1996 Hewlett-Packard Company
 (c) Copyright 1996 International Business Machines Corp.
 (c) Copyright 1996 Sun Microsystems, Inc.
@@ -69,6 +98,7 @@ copyright holders.
 #include <dix-config.h>
 #endif
 
+#include <stdio.h>
 #include <X11/X.h>
 #include <X11/Xos.h>
 #define NEED_EVENTS
@@ -86,6 +116,10 @@ copyright holders.
 #include "../hw/xprint/DiPrint.h"
 #include "../hw/xprint/attributes.h"
 #include "modinit.h"
+#include "resource.h"
+#include "dixfont.h"
+#include "swapreq.h"
+#include "dpi.h"
 
 static void XpResetProc(ExtensionEntry *);
 
@@ -117,6 +151,8 @@ static int ProcXpQueryScreens(ClientPtr)
 static int ProcXpGetPageDimensions(ClientPtr);
 static int ProcXpSetImageResolution(ClientPtr);
 static int ProcXpGetImageResolution(ClientPtr);
+static int ProcXpClientDpi(ClientPtr);           /* BUG: 4402782 */
+static int ProcXpOpenFont(ClientPtr);           /* BUG: 4402782 */
 
 static void SwapXpNotifyEvent(xPrintPrintEvent *, xPrintPrintEvent *);
 static void SwapXpAttributeEvent(xPrintAttributeEvent *, xPrintAttributeEvent *);
@@ -144,6 +180,7 @@ static int SProcXpRehashPrinterList(Clie
 static int SProcXpGetPageDimensions(ClientPtr);
 static int SProcXpSetImageResolution(ClientPtr);
 static int SProcXpGetImageResolution(ClientPtr);
+static int SProcXpClientDpi(ClientPtr);
 
 static void SendXpNotify(XpContextPtr, int, int);
 static void SendAttributeNotify(XpContextPtr, int);
@@ -167,6 +204,9 @@ typedef struct  _xpScreen {
     struct _driver *drivers;
 } XpScreenRec, *XpScreenPtr;
 
+static XpClientDPIPtr client_dpi_head;          /* BUG: 4402782 */
+static int client_server_font;          /* BUG: 4402782 */
+
 /*
  * Each context has a list of XpClients indicating which clients have
  * associated this context with their connection.
@@ -259,6 +299,285 @@ static RESTYPE RTclient, RTcontext, RTpa
  */
 static CARD32 allEvents = XPPrintMask | XPAttributeMask;
 
+/*******************************************************************************
+ *
+ * BUG: 4402782: ClientDPI Add, Remove, Search
+ *
+ ******************************************************************************/
+
+/*
+ * Create an entry for the clientDPI to be stored. This entry will hold lookup
+ * information (context and clientAsMask), and the font and scaling information.
+ */
+_X_HIDDEN Bool
+XpClientDPIAdd(				/* Bug: 4402782 */
+XpContextPtr context,
+int clientAsMask,
+int client_dpi)
+{
+    XpClientDPIPtr new;
+    XpClientDPIPtr temp = client_dpi_head;
+    int found = 0;
+
+    /*
+     * Check if the client already has an entry in the list
+     */
+    while(temp != NULL)
+    {
+        if(temp->context == context)
+            found = 1;
+        temp = temp->pNext;
+    }
+
+    /*
+     * If not, then create a new entry
+     */
+    if (!found)
+    {
+        new = (XpClientDPIPtr)malloc(sizeof(XpClientDPIRec));
+
+        if(new == NULL)
+            return FALSE;
+
+        new->pNext = client_dpi_head;
+        new->pPrev = NULL;
+        new->head  = NULL;
+        new->context = context;
+        new->client_dpi = client_dpi;
+        new->clientAsMask = clientAsMask;
+        new->scale_factor = 1;
+        new->client_x = -1;
+        new->server_x = -1;
+
+        /*
+         * Put the new entry at the head of the list
+         */
+        client_dpi_head = new;
+    }
+
+    return TRUE;
+}       /* Bug: 4402782 */
+
+/*
+ * This function is currently not called. This is not a good state, but we cannot
+ * call the function at the end of the document since the client is still connected
+ * and believe that fonts that were opened are still open for it. (They are, but this 
+ * list contains the links to go between the fonts). Need to check if there is a way
+ * to remove the client when the client terminates its connection with Xprt?
+ */
+static Bool
+XpClientDPIRemove(XpContextPtr context)      /* Bug: 4402782 */
+{
+    XpClientDPIPtr temp = client_dpi_head;
+    Bool found = FALSE;
+
+    /*
+     * Search the list for the correct context
+     */
+    while(!found && temp != NULL)
+    {
+        if(temp->context != context)
+            temp = temp->pNext;
+        else
+        {
+            XpClientFontsPtr temp2;
+
+            /*
+             * Once it is found, then remove it from this list
+             */
+            found = TRUE;
+            if(temp->pPrev != NULL)
+                temp->pPrev->pNext = temp->pNext;
+            else
+                client_dpi_head = temp->pNext;
+
+            if(temp->pNext != NULL)
+                temp->pNext->pPrev = temp->pPrev;
+
+            temp2 = temp->head;
+
+            /*
+             * Free the fonts??
+             */
+            while(temp2 != NULL)
+            {
+                XpClientFontsPtr item_free = temp2;
+                temp2 = temp2->pNext;
+
+                /*
+                 * Do we need to actually free the font here, or will the
+                 * client dying take care of that?
+                 */
+                free(item_free);
+            }
+
+
+            free(temp);
+        }
+    }
+
+    return found;
+}       /* Bug: 4402782 */
+
+/*
+ * Return the DPI and scale factor the the caller
+ */
+_X_HIDDEN Bool
+XpClientDPIGetData(		 /* Bug: 4402782 */
+XpContextPtr context,
+int *pDPI,
+float *pSF)
+{
+    XpClientDPIPtr temp = client_dpi_head;
+    Bool found = FALSE;
+
+    while(!found && temp != NULL)
+    {
+        if(temp->context != context)
+            temp = temp->pNext;
+        else
+        {
+            found = TRUE;
+            *pDPI = temp->client_dpi;
+            *pSF  = temp->scale_factor;
+        }
+    }
+
+    return found;
+}       /* Bug: 4402782 */
+
+/*
+ * Return the DPI and scale factor the caller
+ */
+_X_HIDDEN Bool
+XpClientDPIFindData(		    /* Bug: 4402782 */
+int clientAsMask,
+int *pDPI,
+float *pSF)
+{
+    XpClientDPIPtr temp = client_dpi_head;
+    Bool found = FALSE;
+
+    while(!found && temp != NULL)
+    {
+        if(temp->clientAsMask != clientAsMask)
+            temp = temp->pNext;
+        else
+        {
+            found = TRUE;
+            *pDPI = temp->client_dpi;
+            *pSF  = temp->scale_factor;
+        }
+    }
+    return found;
+}       /* Bug: 4402782 */
+
+/*
+ * Return the DPI and scale factor the the caller
+ */
+_X_HIDDEN XpClientDPIPtr
+XpClientDPIGetRec(XpContextPtr context)      /* Bug: 4402782 */
+{
+    XpClientDPIPtr temp = client_dpi_head;
+    Bool found = FALSE;
+
+    while(!found && temp != NULL)
+    {
+        if(temp->context != context)
+            temp = temp->pNext;
+        else
+            found = TRUE;
+    }
+
+    if(!found)
+        temp = NULL;
+
+    return temp;
+}       /* Bug: 4402782 */
+
+_X_HIDDEN XpClientDPIPtr
+XpClientDPIFindRec(int clientAsMask)        /* Bug: 4402782 */
+{
+    XpClientDPIPtr temp = client_dpi_head;
+    Bool found = FALSE;
+
+    while(!found && temp != NULL)
+    {
+        if(temp->clientAsMask != clientAsMask)
+            temp = temp->pNext;
+        else
+            found = TRUE;
+    }
+
+    if(!found)
+        temp = NULL;
+
+    return temp;
+}       /* Bug: 4402782 */
+
+_X_HIDDEN Bool
+XpClientDPISet(      /* Bug: 4402782 */
+XpContextPtr context,
+int serverDPI)
+{
+    XpClientDPIPtr temp = client_dpi_head;
+    Bool found = FALSE;
+
+    while(!found && temp != NULL)
+    {
+        if(temp->context != context)
+            temp = temp->pNext;
+        else
+        {
+            found = TRUE;
+            temp->scale_factor = (float)serverDPI/(float)temp->client_dpi;
+        }
+    }
+
+    return found;
+}       /* Bug: 4402782 */
+
+_X_HIDDEN FontPtr
+XpClientDPIGrabFont(	/* Bug: 4402782 */
+XpClientDPIPtr pClientDPI,
+FontPtr pFont)
+{
+    FontPtr tempFont = pFont;
+    Bool found = FALSE;
+    XpClientFontsPtr temp = pClientDPI->head;
+
+    while(temp != NULL && !found)
+        if(temp->client_font == pFont)
+        {
+            tempFont = temp->server_font;
+            found = TRUE;
+        }
+        else
+            temp = temp->pNext;
+
+    return tempFont;
+}       /* Bug: 4402782 */
+
+_X_HIDDEN void
+XpClientDPIGetPos(	 /* Bug: 4402782 */
+XpClientDPIPtr pClientDPI,
+int *pCx,
+int *pSx)
+{
+    *pCx = pClientDPI->client_x;
+    *pSx = pClientDPI->server_x;
+}
+
+_X_HIDDEN void
+XpClientDPISetPos(	/* Bug 4402782 */
+XpClientDPIPtr pClientDPI,
+int Cx,
+int Sx)
+{
+    pClientDPI->client_x = Cx;
+    pClientDPI->server_x = Sx;
+}
+
 
 /*******************************************************************************
  *
@@ -310,6 +629,11 @@ XpExtensionInit(INITARGS)
 	    screenInfo.screens[i]->CloseScreen = XpCloseScreen;
 	}
     }
+    /*
+     * BUG: 4402782: Client DPI. Set the font open function to new Xprt functions
+     *               that will do font renaming/ double opening if necessary.
+     */
+    ChangeProcVector(X_OpenFont, ProcXpOpenFont, SProcOpenFont);
 }
 
 static void
@@ -442,6 +766,8 @@ ProcXpDispatch(ClientPtr client)
             return ProcXpSetImageResolution(client);
 	case X_PrintGetImageResolution:
             return ProcXpGetImageResolution(client);
+	case X_PrintClientDpi:
+            return ProcXpClientDpi(client);
 	default:
 	    return BadRequest;
     }
@@ -507,8 +833,10 @@ ProcXpSwappedDispatch(ClientPtr client)
             return SProcXpSetImageResolution(client);
 	case X_PrintGetImageResolution:
             return SProcXpGetImageResolution(client);
-	default:
-	    return BadRequest;
+	case X_PrintClientDpi:
+            return SProcXpClientDpi(client);
+        default:
+            return BadRequest;
     }
 }
 
@@ -689,7 +1017,9 @@ ProcXpGetPageDimensions(ClientPtr client
     xRectangle rect;
     xPrintGetPageDimensionsReply rep;
     XpContextPtr pContext;
+    XpClientDPIPtr pClientDPI;
     int result;
+    float scl_fact = 1;
 
     REQUEST_SIZE_MATCH(xPrintGetPageDimensionsReq);
 
@@ -707,6 +1037,13 @@ ProcXpGetPageDimensions(ClientPtr client
        (pContext->funcs.GetReproducibleArea == 0))
         return BadImplementation;
 
+    /*
+     * BUG: 4402782: Client DPI: Get the scale factor for this client
+     */
+    pClientDPI = XpClientDPIGetRec(pContext);
+    if(pClientDPI)
+        scl_fact = pClientDPI->scale_factor;
+
     result = pContext->funcs.GetMediumDimensions(pContext, &width, &height);
     if(result != Success)
         return result;
@@ -718,12 +1055,12 @@ ProcXpGetPageDimensions(ClientPtr client
     rep.type = X_Reply;
     rep.sequenceNumber = client->sequence;
     rep.length = 0;
-    rep.width = width;
-    rep.height = height;
+    rep.width = (CARD16)(width / scl_fact);     /* BUG: 4402782 */
+    rep.height = (CARD16)(height / scl_fact);   /* BUG: 4402782 */
     rep.rx = rect.x;
     rep.ry = rect.y;
-    rep.rwidth = rect.width;
-    rep.rheight = rect.height;
+    rep.rwidth = (CARD16)(rect.width / scl_fact);       /* BUG: 4402782 */
+    rep.rheight = (CARD16)(rect.height / scl_fact);     /* BUG: 4402782 */
 
     if(client->swapped)
     {
@@ -832,6 +1169,218 @@ ProcXpGetImageResolution(ClientPtr clien
     return client->noClientException;
 }
 
+/* BUG: 4402782: Accept the client DPI request */
+static int
+ProcXpClientDpi(ClientPtr client)
+{
+    REQUEST(xPrintClientDpiReq);
+    xPrintClientDpiReply rep;
+    XpContextPtr pContext;
+    Bool status;
+
+    REQUEST_SIZE_MATCH(xPrintClientDpiReq);
+
+    if((pContext = XP_GETPRIV(client)) == (XpContextPtr)NULL)
+    {
+        client->errorValue = stuff->printContext;
+        return XpErrorBase+XPBadContext;
+    }
+
+    /*
+     * Create a new client entry with the specified DPI
+     */
+    status = XpClientDPIAdd(pContext, client->clientAsMask, stuff->clientDPI);
+
+    /*
+     * Send a response back to the client application
+     */
+    rep.type = X_Reply;
+    rep.sequenceNumber = client->sequence;
+    rep.length = 0;
+    rep.status = status;
+
+    WriteToClient(client, sz_xPrintClientDpiReply, (char *)&rep);
+    return client->noClientException;
+}       /* BUG: 4402782 */
+
+static void
+ProcXpSetFont(    /* BUG: 4402782: Store the client or server font */
+    register ClientPtr client,
+    FontPtr pFont)
+{
+    XpClientDPIPtr clientDPI;
+
+    clientDPI = XpClientDPIFindRec(client->clientAsMask);
+
+    /*
+     * This static local variable is set below and is a straight processing line.
+     * No other processes could break in and misuse this.
+     */
+    if(client_server_font == 1)
+        clientDPI->head->client_font = pFont;
+    else
+        clientDPI->head->server_font = pFont;
+}       /* BUG: 4402782 */
+
+static void
+ProcXpMakeFontName( /* BUG: 4402782 */
+    char *font_name,
+    int  *font_len,
+    char *base_name,
+    int   base_len,
+    int   client_dpi)
+{
+    int x, num = 0;
+
+    /*
+     * Create a new font name (xlfd) using the clients DPI values.
+     */
+    for(x=0;x<base_len;x++)
+        if(base_name[x] == '-') {
+            if(++num == 7)
+            {
+                strncpy(font_name, base_name, x+1);
+                strcat(font_name, "0-");
+                *font_len = x + 3;
+            }
+            else if( num == 8)
+            {
+                char size[10];
+                int  pixels;
+
+                sscanf(&base_name[x+1], "%d", &pixels);
+                sprintf(size, "%d", pixels);
+                strcat(font_name, size);
+                strcat(font_name, "-");
+                *font_len += strlen(size) + 1;
+            }
+            else if( num == 9 || num == 10)
+            {
+                char size[10];
+
+                sprintf(size, "%d", client_dpi);
+                strcat(font_name, size);
+                strcat(font_name, "-");
+                *font_len += strlen(size) + 1;
+            }
+            else if( num == 11)
+            {
+                strncat(font_name, &base_name[x+1], base_len - x);
+                *font_len += (base_len - x - 1);
+            }
+            else
+	    {
+	    }
+	}
+}       /* BUG: 4402782 */
+
+
+static int
+ProcXpOpenFont(ClientPtr client)  /* BUG: 4402782 */
+{
+    int err = Success;
+    int client_dpi;
+    float scl_fact = 1;
+    int open_two = 0;
+    int new_fid;
+    XpClientDPIPtr clientDPI;
+
+    /*
+     * Basically this function replaces ProcOpenFont for Xp. It serves the same
+     * purpose, but if the client has specified a scale factor other than 1.0,
+     * this function will create two xlfd font names and open both fonts.
+     */
+    REQUEST(xOpenFontReq);
+
+    REQUEST_FIXED_SIZE(xOpenFontReq, stuff->nbytes);
+    client->errorValue = stuff->fid;
+    LEGAL_NEW_RESOURCE(stuff->fid, client);
+
+    /*
+     * Create the second file id just in case it is necessary
+     */
+    new_fid = 2 * client->clientAsMask | RESOURCE_ID_MASK - stuff->fid;
+
+    /*
+     * Get the data on whether we need to load two fonts
+     */
+    clientDPI = XpClientDPIFindRec(client->clientAsMask);
+
+    if(clientDPI != NULL)
+    {
+        client_dpi = clientDPI->client_dpi;
+        scl_fact   = clientDPI->scale_factor;
+
+        /*
+         * If the scale factor is not 1, then find a free, valid new_fid.
+         */
+        if(scl_fact != 1)
+        {
+            while(!LegalNewID(new_fid, client) &&
+                   new_fid > stuff->fid)
+                new_fid--;
+
+            if(new_fid > stuff->fid)
+                open_two = 1;
+        }
+    }
+
+    /*
+     * Check if we need to open the second font
+     */
+    if (open_two)
+    {
+        XpClientFontsPtr new;
+        char *font_name;
+        int   font_len = 0;
+
+        font_name = (char *)malloc(sizeof(char)*stuff->nbytes+4);
+        memset(font_name, 0, stuff->nbytes+4);
+
+        new = (XpClientFontsPtr)malloc(sizeof(XpClientFontsRec));
+
+        if(font_name && new)
+        {
+            new->pNext = clientDPI->head;
+            clientDPI->head = new;
+
+            ProcXpMakeFontName(font_name, &font_len, &stuff[1], stuff->nbytes, client_dpi);
+
+            /*
+             * This is the part that gets interesting. We set the callback to store
+             * the font data in the clientDPI entry. First open the client font.
+             */
+            SetXpFontFunc(ProcXpSetFont);
+            client_server_font = 1;
+            err = OpenFont(client, stuff->fid, (Mask) 0, font_len, font_name);
+
+            /*
+             * Next open the server font (the big one), then cancel the callback
+             */
+            client_server_font = 2;
+            err = OpenFont(client, new_fid, (Mask) 0, stuff->nbytes, (char *)&stuff[1]);
+            SetXpFontFunc(NULL);
+
+            /*
+             * Add the new fids to the DPI structure
+             */
+            new->client_fid = stuff->fid;
+            new->server_fid = new_fid;
+        }
+    }
+    /*
+     * Just open the one font. No need to open two.
+     */
+    else
+        err = OpenFont(client, stuff->fid, (Mask) 0, stuff->nbytes, (char *)&stuff[1]);
+
+
+    if (err == Success)
+        return(client->noClientException);
+    else
+        return err;
+}       /* BUG: 4402782 */
+
 /*******************************************************************************
  *
  * RehashPrinterList : Cause the server's list of printers to be rebuilt.
@@ -1360,6 +1909,7 @@ ProcXpStartJob(ClientPtr client)
     REQUEST(xPrintStartJobReq);
     XpContextPtr pContext;
     int result = Success;
+    int ires;         /* BUG: 4402782 */
 
     REQUEST_SIZE_MATCH(xPrintStartJobReq);
 
@@ -1389,6 +1939,13 @@ ProcXpStartJob(ClientPtr client)
 
     SendXpNotify(pContext, XPStartJobNotify, FALSE);
 
+    /*
+     * BUG: 4402782: Get the target printer DPI. Use this information to set the
+     * scale factor in the client entry
+     */
+    ires = XpGetResolution(pContext);
+    XpClientDPISet(pContext, ires);
+
     if (client->noClientException != Success)
         return client->noClientException;
     else
@@ -2583,6 +3140,19 @@ SProcXpGetImageResolution(ClientPtr clie
     return ProcXpGetImageResolution(client);
 }
 
+static int
+SProcXpClientDpi(ClientPtr client)        /* BUG: 4402782 */
+{
+    long n;
+    int i;
+
+    REQUEST(xPrintClientDpiReq);
+    swaps(&stuff->length, i);
+    swapl(&stuff->printContext, n);
+    return ProcXpClientDpi(client);
+}       /* BUG: 4402782 */
+
+
 static void
 SwapXpNotifyEvent(xPrintPrintEvent *src, xPrintPrintEvent *dst)
 {
--- dix/Makefile.am	2008-12-16 14:38:49.000000000 -0800
+++ dix/Makefile.am.new	2009-01-16 15:05:39.474170000 -0800
@@ -66,6 +66,17 @@ Xserver-dtrace.h: $(srcdir)/Xserver.d
 	$(DTRACE) -C -h -o $@ -s $(srcdir)/Xserver.d \
 		|| cp Xserver-dtrace.h.in $@
 
+if XPRINT
+
+# Generate dtrace object code for probes in libdix
+dtrace-dix.o: $(top_srcdir)/dix/Xserver.d $(am_libXpdix_la_OBJECTS)
+	$(DTRACE) -G -C -o $@ -s $(top_srcdir)/dix/Xserver.d $(am_libXpdix_la_OBJECTS:%.lo=.libs/%.o)
+
+noinst_PROGRAMS = dix.O
+
+dix.O: dtrace-dix.o $(am_libXpdix_la_OBJECTS)
+	ld -r -o $@ $(am_libXpdix_la_OBJECTS:%.lo=.libs/%.o)
+else
 # Generate dtrace object code for probes in libdix
 dtrace-dix.o: $(top_srcdir)/dix/Xserver.d $(am_libdix_la_OBJECTS)
 	$(DTRACE) -G -C -o $@ -s $(top_srcdir)/dix/Xserver.d $(am_libdix_la_OBJECTS:%.lo=.libs/%.o)
@@ -74,6 +85,8 @@ noinst_PROGRAMS = dix.O
 
 dix.O: dtrace-dix.o $(am_libdix_la_OBJECTS)
 	ld -r -o $@ $(am_libdix_la_OBJECTS:%.lo=.libs/%.o)
+
+endif
 endif
 
 dix.c:
--- dix/main.c	2008-11-05 08:52:17.000000000 -0800
+++ dix/main.c.new	2009-01-22 14:28:24.682130000 -0800
@@ -1,3 +1,32 @@
+/*
+ * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
+ * Use is subject to license terms.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, and/or sell copies of the Software, and to permit persons
+ * to whom the Software is furnished to do so, provided that the above
+ * copyright notice(s) and this permission notice appear in all copies of
+ * the Software and that both the above copyright notice(s) and this
+ * permission notice appear in supporting documentation.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
+ * OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
+ * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
+ * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
+ * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
+ * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ * Except as contained in this notice, the name of a copyright holder
+ * shall not be used in advertising or otherwise to promote the sale, use
+ * or other dealings in this Software without prior written authorization
+ * of the copyright holder.
+ */
 /***********************************************************
 
 Copyright 1987, 1998  The Open Group
@@ -103,9 +132,11 @@ Equipment Corporation.
 #include "extnsionst.h"
 #include "privates.h"
 #include "registry.h"
+#if 0
 #ifdef XPRINT
 #include "DiPrint.h"
 #endif
+#endif
 #ifdef PANORAMIX
 #include "panoramiXsrv.h"
 #else
@@ -252,9 +283,11 @@ main(int argc, char *argv[], char *envp[
 
     InitGlobals();
     InitRegions();
+#if 0
 #ifdef XPRINT
     PrinterInitGlobals();
 #endif
+#endif
 
 #ifdef XQUARTZ
     /* Quartz support on Mac OS X requires that the Cocoa event loop be in
@@ -356,9 +389,11 @@ main(int argc, char *argv[], char *envp[
 	InitCallbackManager();
 	InitVisualWrap();
 	InitOutput(&screenInfo, argc, argv);
+#if 0
 #ifdef XPRINT
 	PrinterInitOutput(&screenInfo, argc, argv);
 #endif
+#endif
 
 	if (screenInfo.numScreens < 1)
 	    FatalError("no screens found");
--- dix/xpstubs.c	2008-11-05 08:52:17.000000000 -0800
+++ dix/xpstubs.c.new	2009-01-22 14:47:23.197162000 -0800
@@ -1,4 +1,33 @@
 /*
+ * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
+ * Use is subject to license terms.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, and/or sell copies of the Software, and to permit persons
+ * to whom the Software is furnished to do so, provided that the above
+ * copyright notice(s) and this permission notice appear in all copies of
+ * the Software and that both the above copyright notice(s) and this
+ * permission notice appear in supporting documentation.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
+ * OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
+ * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
+ * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
+ * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
+ * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ * Except as contained in this notice, the name of a copyright holder
+ * shall not be used in advertising or otherwise to promote the sale, use
+ * or other dealings in this Software without prior written authorization
+ * of the copyright holder.
+ */
+/*
 Copyright 1996, 1998  The Open Group
 
 Permission to use, copy, modify, distribute, and sell this software and its
@@ -34,9 +63,9 @@ from The Open Group.
 #ifdef XPRINT
 #include "DiPrint.h"
 #else
+#if 0
 extern Bool XpClientIsBitmapClient(ClientPtr client);
 extern Bool XpClientIsPrintClient(ClientPtr client, FontPathElementPtr fpe);
-#endif
 
 Bool
 XpClientIsBitmapClient(
@@ -52,6 +81,9 @@ XpClientIsPrintClient(
 {
     return FALSE;
 }
+#endif
+#endif
+
 #ifdef XPRINT
 int
 PrinterOptions(
@@ -61,18 +93,8 @@ PrinterOptions(
 {
     return i;
 }
-void
-PrinterInitOutput(
-     ScreenInfo *pScreenInfo,
-     int argc,
-     char **argv)
-{
-}
 void PrinterUseMsg(void)
 {
 }
-void PrinterInitGlobals(void)
-{
-}
 #endif /* XPRINT */
 
