# Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, and/or sell copies of the Software, and to permit persons
# to whom the Software is furnished to do so, provided that the above
# copyright notice(s) and this permission notice appear in all copies of
# the Software and that both the above copyright notice(s) and this
# permission notice appear in supporting documentation.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
# OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
# INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
# FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
# NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
# WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Except as contained in this notice, the name of a copyright holder
# shall not be used in advertising or otherwise to promote the sale, use
# or other dealings in this Software without prior written authorization
# of the copyright holder.
#

Changes to Xvnc DDX layer to match Xorg 1.6 input device/events API changes

Includes fix contributed by Jürgen Keil  <jrgn.keil@googlemail.com> for
OpenSolaris Bug #8687: german keyboard layout: umlaut keys not accepted by Xvnc
http://defect.opensolaris.org/bz/show_bug.cgi?id=8687

diff -urp -x '*~' -x '*.orig' unix/xc/programs/Xserver/vnc/XserverDesktop.cc unix/xc/programs/Xserver/vnc/XserverDesktop.cc
--- unix/xc/programs/Xserver/vnc/XserverDesktop.cc	2009-04-27 09:17:40.198280000 -0700
+++ unix/xc/programs/Xserver/vnc/XserverDesktop.cc	2009-04-27 09:16:54.127059000 -0700
@@ -40,9 +40,8 @@ extern "C" {
 #define public c_public
 #define class c_class
 
-  // windowTable is in globals.h in XFree 4, but not in XFree 3 unfortunately
-extern WindowPtr *WindowTable;
-extern char *display;
+#include "globals.h"	// extern WindowPtr *WindowTable;
+#include "opaque.h"	// extern char *display;
 
 #include "inputstr.h"
 #include "servermd.h"
@@ -57,7 +56,7 @@ extern char *display;
 #undef class
 }
 
-static xEvent *eventq = NULL;
+static EventList *eventq = NULL;
 static DeviceIntPtr vncKeyboard = NULL;
 static DeviceIntPtr vncMouse = NULL;
 
@@ -213,16 +212,16 @@ XserverDesktop::XserverDesktop(ScreenPtr
 
 // XXX Memory leak here, eventq is not free()-d because it has to exist till server exits
   if (!eventq)
-    eventq = (xEvent *) xcalloc(sizeof(xEvent), GetMaximumEventsNum());
+    eventq = InitEventList(GetMaximumEventsNum());
   if (!eventq)
     FatalError("couldn't allocate room for events\n");
 
   if (vncMouse == NULL) {
-    vncMouse = AddInputDevice(vfbMouseProc, TRUE);
+    vncMouse = AddInputDevice(serverClient, vfbMouseProc, TRUE);
     RegisterPointerDevice (vncMouse);
   }
   if (vncKeyboard == NULL) {
-    vncKeyboard = AddInputDevice(vfbKeybdProc, TRUE);
+    vncKeyboard = AddInputDevice(serverClient, vfbKeybdProc, TRUE);
     RegisterKeyboardDevice (vncKeyboard);
   }
 }
@@ -531,10 +530,10 @@ void XserverDesktop::positionCursor()
 void XserverDesktop::blockHandler(fd_set* fds)
 {
   try {
-    ScreenPtr screenWithCursor = GetCurrentRootWindow()->drawable.pScreen;
+    ScreenPtr screenWithCursor = GetCurrentRootWindow(vncMouse)->drawable.pScreen;
     if (screenWithCursor == pScreen) {
       int x, y;
-      GetSpritePosition(&x, &y);
+      GetSpritePosition(vncMouse, &x, &y);
       if (x != cursorPos.x || y != cursorPos.y) {
         cursorPos = oldCursorPos = Point(x, y);
         server->setCursorPos(cursorPos);
@@ -695,15 +694,16 @@ void XserverDesktop::pointerEvent(const 
   // end of processing a load of RFB.
   //(*pScreen->SetCursorPosition) (pScreen, pos.x, pos.y, FALSE);
 
-  NewCurrentScreen(pScreen, pos.x, pos.y);
+  NewCurrentScreen(vncMouse, pScreen, pos.x, pos.y);
 
   if (!pos.equals(cursorPos)) {
     valuators[0] = pos.x;
     valuators[1] = pos.y;
+    GetEventList(&eventq);
     n = GetPointerEvents (eventq, vncMouse, MotionNotify, 0,
                           POINTER_ABSOLUTE, 0, 2, valuators);
     for (i = 0; i < n; i++)
-      mieqEnqueue (vncMouse, eventq + i);
+      mieqEnqueue (vncMouse, eventq[i].event);
   }
 
   for (int i = 0; i < 5; i++) {
@@ -720,7 +719,7 @@ void XserverDesktop::pointerEvent(const 
                                       ButtonPress : ButtonRelease,
                             detail, POINTER_RELATIVE, 0, 0, NULL);
       for (j = 0; j < n; j++)
-        mieqEnqueue (vncMouse, eventq + j);
+        mieqEnqueue (vncMouse, eventq[j].event);
     }
   }
 
@@ -842,7 +841,7 @@ private:
     n = GetKeyboardEvents (eventq, vncKeyboard,
                            down ? KeyPress : KeyRelease, keycode);
     for (i = 0; i < n; i++)
-      mieqEnqueue (vncKeyboard, eventq + i);
+      mieqEnqueue (vncKeyboard, eventq[i].event);
     vlog.debug("fake keycode %d %s", keycode, down ? "down" : "up");
   }
   int modIndex;
@@ -917,6 +917,6 @@
     vlog.debug("Ignoring caps lock");
     return;
   }
-  KeyClassPtr keyc = vncKeyboard->key;
+  KeyClassPtr keyc = inputInfo.keyboard->key;
   KeySymsPtr keymap = &keyc->curKeySyms;
   int i, j, k, n;
@@ -970,7 +969,7 @@ void XserverDesktop::keyEvent(rdr::U32 k
       if (!keymap->map[(kc - keymap->minKeyCode) * keymap->mapWidth]) {
         keymap->map[(kc - keymap->minKeyCode) * keymap->mapWidth] = keysym;
         col = 0;
-        SendMappingNotify(MappingKeyboard, kc, 1, serverClient);
+        SendMappingNotify(vncKeyboard, MappingKeyboard, kc, 1, serverClient);
         vlog.info("Added unknown keysym 0x%x to keycode %d",keysym,kc);
         break;
       }
@@ -1009,7 +1008,7 @@ void XserverDesktop::keyEvent(rdr::U32 k
   n = GetKeyboardEvents (eventq, vncKeyboard, down ? KeyPress : KeyRelease,
                          kc);
   for (i = 0; i < n; i++)
-    mieqEnqueue (vncKeyboard, eventq + i);
+    mieqEnqueue (vncKeyboard, eventq[i].event);
 }
 
 
@@ -1366,7 +1365,7 @@ static int vfbMouseProc(DeviceIntPtr pDe
     map[3] = 3;
     map[4] = 4;
     map[5] = 5;
-    InitPointerDeviceStruct(&pDev->c_public, map, 5, GetMotionHistory,
+    InitPointerDeviceStruct(&pDev->c_public, map, 5,
                             (PtrCtrlProcPtr)NoopDDA, GetMotionHistorySize(), 2);
     break;
 
diff -urp -x '*~' -x '*.orig' unix/xc/programs/Xserver/vnc/Xvnc/xvnc.cc unix/xc/programs/Xserver/vnc/Xvnc/xvnc.cc
--- unix/xc/programs/Xserver/vnc/Xvnc/xvnc.cc	2009-04-27 09:17:40.199148000 -0700
+++ unix/xc/programs/Xserver/vnc/Xvnc/xvnc.cc	2009-04-27 09:16:54.127984000 -0700
@@ -235,7 +235,6 @@
             "Parameter names are case-insensitive.  The parameters are:\n\n");
     rfb::Configuration::listParams(79, 14);
   }
-}
 
 static bool displayNumFree(int num)
 {
@@ -720,21 +720,30 @@ static Bool vfbCursorOffScreen(ScreenPtr
   return FALSE;
 }
 static void vfbCrossScreen (ScreenPtr pScreen, Bool entering) {}
-static Bool vfbRealizeCursor(ScreenPtr pScreen, CursorPtr pCursor) {
+static Bool vfbRealizeCursor(DeviceIntPtr pDev, ScreenPtr pScreen,
+			     CursorPtr pCursor) {
   return TRUE;
 }
-static Bool vfbUnrealizeCursor(ScreenPtr pScreen, CursorPtr pCursor) {
+static Bool vfbUnrealizeCursor(DeviceIntPtr pDev, ScreenPtr pScreen,
+			       CursorPtr pCursor) {
   return TRUE;
 }
-static void vfbSetCursor(ScreenPtr pScreen, CursorPtr pCursor,
+static void vfbSetCursor(DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor,
                                int x, int y) {}
-static void vfbMoveCursor(ScreenPtr pScreen, int x, int y) {}
+static void vfbMoveCursor(DeviceIntPtr pDev, ScreenPtr pScreen, int x, int y) {}
 
+static Bool vfbDeviceCursorInitialize(DeviceIntPtr pDev, ScreenPtr pScreen) {
+    return TRUE;
+}
+static void vfbDeviceCursorCleanup(DeviceIntPtr pDev, ScreenPtr pScreen) {}
+
 static miPointerSpriteFuncRec vfbPointerSpriteFuncs = {
   vfbRealizeCursor,
   vfbUnrealizeCursor,
   vfbSetCursor,
-  vfbMoveCursor
+  vfbMoveCursor,
+  vfbDeviceCursorInitialize,
+  vfbDeviceCursorCleanup  
 };
 
 static miPointerScreenFuncRec vfbPointerScreenFuncs = {
@@ -935,7 +937,6 @@ Bool LegalModifier(unsigned int key, Dev
 void ProcessInputEvents()
 {
   mieqProcessInputEvents();
-  miPointerUpdate();
 }
 
 void DDXRingBell(int percent, int pitch, int duration)
@@ -950,3 +956,5 @@
 {
   mieqInit ();
 }
+
+} // extern "C"

diff -urp -x '*~' -x '*.orig' unix/xc/programs/Xserver/vnc/vncHooks.cc unix/xc/programs/Xserver/vnc/vncHooks.cc
--- unix/xc/programs/Xserver/vnc/vncHooks.cc	2009-04-27 09:17:40.232606000 -0700
+++ unix/xc/programs/Xserver/vnc/vncHooks.cc	2009-04-27 09:16:54.124221000 -0700
@@ -27,6 +27,7 @@
 extern "C" {
 #define class c_class
 #define private c_private
+#define public c_public
 #include "scrnintstr.h"
 #include "windowstr.h"
 #include "gcstruct.h"
@@ -47,6 +48,7 @@ extern "C" {
 
 #undef class
 #undef private
+#undef public
 }
 
 #include "RegionHelper.h"
@@ -112,7 +114,8 @@ static RegionPtr vncHooksRestoreAreas(Wi
 static void vncHooksInstallColormap(ColormapPtr pColormap);
 static void vncHooksStoreColors(ColormapPtr pColormap, int ndef,
                                 xColorItem* pdef);
-static Bool vncHooksDisplayCursor(ScreenPtr pScreen, CursorPtr cursor);
+static Bool vncHooksDisplayCursor(DeviceIntPtr pDev, ScreenPtr pScreen,
+				  CursorPtr cursor);
 static void vncHooksBlockHandler(int i, pointer blockData, pointer pTimeout,
                                  pointer pReadmask);
 
@@ -417,12 +420,14 @@ static void vncHooksStoreColors(Colormap
 
 // DisplayCursor - get the cursor shape
 
-static Bool vncHooksDisplayCursor(ScreenPtr pScreen_, CursorPtr cursor)
+static Bool vncHooksDisplayCursor(DeviceIntPtr pDev, ScreenPtr pScreen_,
+				  CursorPtr cursor)
 {
   SCREEN_UNWRAP(pScreen_, DisplayCursor);
 
-  Bool ret = (*pScreen->DisplayCursor) (pScreen, cursor);
+  Bool ret = (*pScreen->DisplayCursor) (pDev, pScreen, cursor);
 
+  if (cursor != NullCursor)
   vncHooksScreen->desktop->setCursor(cursor);
 
 
