From a99ce1b80c7fd3f0b611eb782dcda32ecd240d5f Mon Sep 17 00:00:00 2001
From: Alan Coopersmith <alan.coopersmith@sun.com>
Date: Fri, 30 Oct 2009 23:38:18 -0700
Subject: [PATCH] Buffer overflow in TcpSocket::sameMachine for IPv6 connections

Only enough room to write IPv4 addresses was being passed to
getpeername & getsockname, but they could be used on IPv6 connections.

If a connection was made to an IPv6 address, the call to getpeername
would overwrite addrlen with the actual size of the IPv6 address, which
would then be passed to getsockname as the space available to write the
next address, which would cause it to overflow the stack.

OpenSolaris bug report: http://defect.opensolaris.org/bz/show_bug.cgi?id=12366
---
 common/network/TcpSocket.cxx |   24 +++++++++++++++++++-----
 1 files changed, 19 insertions(+), 5 deletions(-)

diff --git a/common/network/TcpSocket.cxx b/common/network/TcpSocket.cxx
index 7fd9c6a..93cdceb 100644
--- a/common/network/TcpSocket.cxx
+++ b/common/network/TcpSocket.cxx
@@ -293,13 +293,27 @@ char* TcpSocket::getPeerEndpoint() {
 }
 
 bool TcpSocket::sameMachine() {
-  struct sockaddr_in peeraddr, myaddr;
-  socklen_t addrlen = sizeof(struct sockaddr_in);
+  vnc_sockaddr_t peeraddr, myaddr;
+  socklen_t addrlen;
 
-  getpeername(getFd(), (struct sockaddr *)&peeraddr, &addrlen);
-  getsockname(getFd(), (struct sockaddr *)&myaddr, &addrlen);
+  addrlen = sizeof(peeraddr);
+  if (getpeername(getFd(), &peeraddr.u.sa, &addrlen) < 0)
+      throw SocketException ("unable to get peer address", errorNumber);
 
-  return (peeraddr.sin_addr.s_addr == myaddr.sin_addr.s_addr);
+  addrlen = sizeof(myaddr); /* need to reset, since getpeername overwrote */
+  if (getsockname(getFd(), &myaddr.u.sa, &addrlen) < 0)
+      throw SocketException ("unable to get my address", errorNumber);
+
+  if (peeraddr.u.sa.sa_family != myaddr.u.sa.sa_family)
+      return false;
+
+#ifdef HAVE_GETADDRINFO
+  if (peeraddr.u.sa.sa_family == AF_INET6)
+      return IN6_ARE_ADDR_EQUAL(&peeraddr.u.sin6.sin6_addr,
+				&myaddr.u.sin6.sin6_addr);
+#endif
+
+  return (peeraddr.u.sin.sin_addr.s_addr == myaddr.u.sin.sin_addr.s_addr);
 }
 
 void TcpSocket::shutdown()
-- 
1.5.6.5

