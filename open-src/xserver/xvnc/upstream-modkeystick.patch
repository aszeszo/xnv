From c4867c83722795c55b07c0fbcbd22fe8e86b96e7 Mon Sep 17 00:00:00 2001
From: astrand <astrand@3789f03b-4d11-0410-bbf8-ca57d06f2519>
Date: Wed, 9 Dec 2009 12:28:19 +0000
Subject: [PATCH] Avoid modifiers such as shift sticking.

git-svn-id: https://tigervnc.svn.sourceforge.net/svnroot/tigervnc/trunk@3924 3789f03b-4d11-0410-bbf8-ca57d06f2519
---
 unix/xserver/hw/vnc/Input.cc |   17 +++++++++++++++++
 1 files changed, 17 insertions(+), 0 deletions(-)

diff --git a/unix/xserver/hw/vnc/Input.cc b/unix/xserver/hw/vnc/Input.cc
index 478240c..4ad1564 100644
--- a/unix/xserver/hw/vnc/Input.cc
+++ b/unix/xserver/hw/vnc/Input.cc
@@ -373,6 +373,14 @@ void KeyboardDevice::keyEvent(rdr::U32 keysym, bool down)
 	unsigned int i, n;
 	int j, k, action;
 
+	/* 
+	 * Since we are checking the current state to determine if we need
+	 * to fake modifiers, we must make sure that everything put on the
+	 * input queue is processed before we start. Otherwise, shift may be
+	 * stuck down.
+	 */ 
+	mieqProcessInputEvents();
+
 	if (keysym == XK_Caps_Lock) {
 		vlog.debug("Ignoring caps lock");
 		return;
@@ -506,6 +514,15 @@ ModeSwitchFound:
 	action = down ? KeyPress : KeyRelease;
 	n = GetKeyboardEvents(eventq, dev, action, kc);
 	enqueueEvents(dev, n);
+	
+	/*
+	 * When faking a modifier we are putting a keycode (which can
+	 * currently activate the desired modifier) on the input
+	 * queue. A future modmap change can change the mapping so
+	 * that this keycode means something else entirely. Guard
+	 * against this by processing the queue now.
+	 */
+	mieqProcessInputEvents();
 }
 
 static KeySym KeyCodetoKeySym(KeySymsPtr keymap, int keycode, int col)
-- 
1.5.6.5

